
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 15 20:53:54 MST 2021
//----------------------------------------------------

package Backend;

import java_cup.runtime.Symbol;
import Frontend.Interfaz.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 15 20:53:54 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\030\002\000\002\003\007\000\002\003\010\000\002" +
    "\003\005\000\002\003\007\000\002\004\016\000\002\031" +
    "\002\000\002\027\007\000\002\027\010\000\002\027\005" +
    "\000\002\027\007\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\003\000\002\006\013" +
    "\000\002\006\013\000\002\006\013\000\002\006\013\000" +
    "\002\007\004\000\002\007\003\000\002\007\004\000\002" +
    "\007\003\000\002\007\004\000\002\007\003\000\002\010" +
    "\011\000\002\011\011\000\002\011\011\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\012\010\000" +
    "\002\013\013\000\002\013\013\000\002\013\013\000\002" +
    "\013\013\000\002\014\004\000\002\014\003\000\002\014" +
    "\004\000\002\014\003\000\002\014\004\000\002\014\003" +
    "\000\002\015\021\000\002\015\022\000\002\015\021\000" +
    "\002\016\004\000\002\016\003\000\002\016\004\000\002" +
    "\016\003\000\002\016\004\000\002\016\003\000\002\017" +
    "\015\000\002\017\015\000\002\017\015\000\002\017\015" +
    "\000\002\020\011\000\002\021\006\000\002\022\010\000" +
    "\002\022\007\000\002\022\010\000\002\022\007\000\002" +
    "\022\010\000\002\022\007\000\002\022\010\000\002\022" +
    "\010\000\002\022\010\000\002\023\011\000\002\024\012" +
    "\000\002\024\011\000\002\024\012\000\002\024\011\000" +
    "\002\024\012\000\002\024\011\000\002\024\012\000\002" +
    "\024\011\000\002\025\013\000\002\025\012\000\002\025" +
    "\012\000\002\026\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\012\004\004\015\011\017\014\025\010\001" +
    "\002\000\006\011\261\045\262\001\002\000\014\002\uffff" +
    "\004\uffff\015\uffff\017\uffff\025\uffff\001\002\000\014\002" +
    "\ufffd\004\ufffd\015\ufffd\017\ufffd\025\ufffd\001\002\000\014" +
    "\002\256\004\004\015\011\017\014\025\010\001\002\000" +
    "\004\045\247\001\002\000\004\035\024\001\002\000\014" +
    "\002\ufffb\004\ufffb\015\ufffb\017\ufffb\025\ufffb\001\002\000" +
    "\014\002\ufff9\004\ufff9\015\ufff9\017\ufff9\025\ufff9\001\002" +
    "\000\004\025\015\001\002\000\004\045\016\001\002\000" +
    "\006\026\020\043\ufff8\001\002\000\004\043\023\001\002" +
    "\000\004\046\021\001\002\000\004\043\022\001\002\000" +
    "\014\002\ufff6\004\ufff6\015\ufff6\017\ufff6\025\ufff6\001\002" +
    "\000\014\002\ufff7\004\ufff7\015\ufff7\017\ufff7\025\ufff7\001" +
    "\002\000\004\013\025\001\002\000\004\045\026\001\002" +
    "\000\004\036\027\001\002\000\004\037\030\001\002\000" +
    "\006\007\035\016\034\001\002\000\004\040\246\001\002" +
    "\000\004\007\211\001\002\000\004\040\207\001\002\000" +
    "\004\035\204\001\002\000\004\035\036\001\002\000\010" +
    "\045\041\046\037\050\040\001\002\000\004\033\174\001" +
    "\002\000\004\033\155\001\002\000\004\033\042\001\002" +
    "\000\004\045\043\001\002\000\004\036\044\001\002\000" +
    "\004\037\045\001\002\000\006\014\046\045\053\001\002" +
    "\000\004\035\147\001\002\000\010\014\uffca\040\uffca\045" +
    "\uffca\001\002\000\010\014\046\040\105\045\053\001\002" +
    "\000\010\014\uffc8\040\uffc8\045\uffc8\001\002\000\010\014" +
    "\uffcc\040\uffcc\045\uffcc\001\002\000\006\026\055\035\054" +
    "\001\002\000\006\045\074\046\073\001\002\000\004\045" +
    "\056\001\002\000\012\027\062\030\057\031\061\032\060" +
    "\001\002\000\004\046\071\001\002\000\004\046\067\001" +
    "\002\000\004\046\065\001\002\000\004\046\063\001\002" +
    "\000\004\043\064\001\002\000\010\014\uffd4\040\uffd4\045" +
    "\uffd4\001\002\000\004\043\066\001\002\000\010\014\uffd3" +
    "\040\uffd3\045\uffd3\001\002\000\004\043\070\001\002\000" +
    "\010\014\uffd2\040\uffd2\045\uffd2\001\002\000\004\043\072" +
    "\001\002\000\010\014\uffd5\040\uffd5\045\uffd5\001\002\000" +
    "\004\051\101\001\002\000\004\051\075\001\002\000\004" +
    "\045\076\001\002\000\004\036\077\001\002\000\004\043" +
    "\100\001\002\000\010\014\uffd7\040\uffd7\045\uffd7\001\002" +
    "\000\004\046\102\001\002\000\004\036\103\001\002\000" +
    "\004\043\104\001\002\000\010\014\uffd6\040\uffd6\045\uffd6" +
    "\001\002\000\020\005\uffd1\006\uffd1\007\uffd1\012\111\017" +
    "\uffd1\025\uffd1\040\uffd1\001\002\000\010\014\uffcb\040\uffcb" +
    "\045\uffcb\001\002\000\010\014\uffc9\040\uffc9\045\uffc9\001" +
    "\002\000\010\014\uffcd\040\uffcd\045\uffcd\001\002\000\004" +
    "\007\113\001\002\000\016\005\uffbe\006\uffbe\007\uffbe\017" +
    "\uffbe\025\uffbe\040\uffbe\001\002\000\004\035\114\001\002" +
    "\000\010\045\117\046\115\050\116\001\002\000\004\033" +
    "\141\001\002\000\004\033\126\001\002\000\004\033\120" +
    "\001\002\000\004\045\121\001\002\000\004\036\122\001" +
    "\002\000\004\037\123\001\002\000\006\014\046\045\053" +
    "\001\002\000\010\014\046\040\125\045\053\001\002\000" +
    "\016\005\uffd1\006\uffd1\007\uffd1\017\uffd1\025\uffd1\040\uffd1" +
    "\001\002\000\006\045\130\046\127\001\002\000\004\036" +
    "\135\001\002\000\004\036\131\001\002\000\004\037\132" +
    "\001\002\000\006\014\046\045\053\001\002\000\010\014" +
    "\046\040\134\045\053\001\002\000\016\005\uffcf\006\uffcf" +
    "\007\uffcf\017\uffcf\025\uffcf\040\uffcf\001\002\000\004\037" +
    "\136\001\002\000\006\014\046\045\053\001\002\000\010" +
    "\014\046\040\140\045\053\001\002\000\016\005\uffce\006" +
    "\uffce\007\uffce\017\uffce\025\uffce\040\uffce\001\002\000\004" +
    "\046\142\001\002\000\004\036\143\001\002\000\004\037" +
    "\144\001\002\000\006\014\046\045\053\001\002\000\010" +
    "\014\046\040\146\045\053\001\002\000\016\005\uffd0\006" +
    "\uffd0\007\uffd0\017\uffd0\025\uffd0\040\uffd0\001\002\000\004" +
    "\024\150\001\002\000\004\051\151\001\002\000\004\045" +
    "\152\001\002\000\004\036\153\001\002\000\004\043\154" +
    "\001\002\000\010\014\uffd8\040\uffd8\045\uffd8\001\002\000" +
    "\006\045\157\046\156\001\002\000\004\036\166\001\002" +
    "\000\004\036\160\001\002\000\004\037\161\001\002\000" +
    "\006\014\046\045\053\001\002\000\010\014\046\040\163" +
    "\045\053\001\002\000\020\005\uffcf\006\uffcf\007\uffcf\012" +
    "\164\017\uffcf\025\uffcf\040\uffcf\001\002\000\004\007\113" +
    "\001\002\000\016\005\uffbc\006\uffbc\007\uffbc\017\uffbc\025" +
    "\uffbc\040\uffbc\001\002\000\004\037\167\001\002\000\006" +
    "\014\046\045\053\001\002\000\010\014\046\040\171\045" +
    "\053\001\002\000\020\005\uffce\006\uffce\007\uffce\012\172" +
    "\017\uffce\025\uffce\040\uffce\001\002\000\004\007\113\001" +
    "\002\000\016\005\uffbb\006\uffbb\007\uffbb\017\uffbb\025\uffbb" +
    "\040\uffbb\001\002\000\004\046\175\001\002\000\004\036" +
    "\176\001\002\000\004\037\177\001\002\000\006\014\046" +
    "\045\053\001\002\000\010\014\046\040\201\045\053\001" +
    "\002\000\020\005\uffd0\006\uffd0\007\uffd0\012\202\017\uffd0" +
    "\025\uffd0\040\uffd0\001\002\000\004\007\113\001\002\000" +
    "\016\005\uffbd\006\uffbd\007\uffbd\017\uffbd\025\uffbd\040\uffbd" +
    "\001\002\000\004\036\205\001\002\000\004\043\206\001" +
    "\002\000\004\007\uffa3\001\002\000\014\002\uffa5\004\uffa5" +
    "\015\uffa5\017\uffa5\025\uffa5\001\002\000\004\040\245\001" +
    "\002\000\004\035\212\001\002\000\010\045\215\046\213" +
    "\050\214\001\002\000\004\033\237\001\002\000\004\033" +
    "\224\001\002\000\004\033\216\001\002\000\004\045\217" +
    "\001\002\000\004\036\220\001\002\000\004\037\221\001" +
    "\002\000\006\014\046\045\053\001\002\000\010\014\046" +
    "\040\223\045\053\001\002\000\004\012\111\001\002\000" +
    "\006\045\226\046\225\001\002\000\004\036\233\001\002" +
    "\000\004\036\227\001\002\000\004\037\230\001\002\000" +
    "\006\014\046\045\053\001\002\000\010\014\046\040\232" +
    "\045\053\001\002\000\004\012\164\001\002\000\004\037" +
    "\234\001\002\000\006\014\046\045\053\001\002\000\010" +
    "\014\046\040\236\045\053\001\002\000\004\012\172\001" +
    "\002\000\004\046\240\001\002\000\004\036\241\001\002" +
    "\000\004\037\242\001\002\000\006\014\046\045\053\001" +
    "\002\000\010\014\046\040\244\045\053\001\002\000\004" +
    "\012\202\001\002\000\014\002\uffa6\004\uffa6\015\uffa6\017" +
    "\uffa6\025\uffa6\001\002\000\014\002\uffa4\004\uffa4\015\uffa4" +
    "\017\uffa4\025\uffa4\001\002\000\006\026\251\043\250\001" +
    "\002\000\014\002\ufff5\004\ufff5\015\ufff5\017\ufff5\025\ufff5" +
    "\001\002\000\004\046\252\001\002\000\004\043\253\001" +
    "\002\000\014\002\ufff4\004\ufff4\015\ufff4\017\ufff4\025\ufff4" +
    "\001\002\000\014\002\ufffe\004\ufffe\015\ufffe\017\ufffe\025" +
    "\ufffe\001\002\000\014\002\000\004\000\015\000\017\000" +
    "\025\000\001\002\000\004\002\001\001\002\000\014\002" +
    "\ufffc\004\ufffc\015\ufffc\017\ufffc\025\ufffc\001\002\000\014" +
    "\002\ufffa\004\ufffa\015\ufffa\017\ufffa\025\ufffa\001\002\000" +
    "\004\035\u0144\001\002\000\004\035\263\001\002\000\004" +
    "\025\264\001\002\000\004\045\265\001\002\000\004\051" +
    "\266\001\002\000\004\025\267\001\002\000\004\045\270" +
    "\001\002\000\004\036\271\001\002\000\004\037\272\001" +
    "\002\000\016\005\303\006\275\007\035\017\306\020\274" +
    "\025\300\001\002\000\016\005\uffe6\006\uffe6\007\uffe6\017" +
    "\uffe6\025\uffe6\040\uffe6\001\002\000\004\035\u0125\001\002" +
    "\000\004\035\u0106\001\002\000\016\005\uffe4\006\uffe4\007" +
    "\uffe4\017\uffe4\025\uffe4\040\uffe4\001\002\000\016\005\303" +
    "\006\275\007\035\017\306\025\300\040\u0104\001\002\000" +
    "\004\045\373\001\002\000\016\005\uffec\006\uffec\007\uffec" +
    "\017\uffec\025\uffec\040\uffec\001\002\000\016\005\uffe8\006" +
    "\uffe8\007\uffe8\017\uffe8\025\uffe8\040\uffe8\001\002\000\004" +
    "\035\316\001\002\000\016\005\uffe3\006\uffe3\007\uffe3\017" +
    "\uffe3\025\uffe3\040\uffe3\001\002\000\016\005\uffea\006\uffea" +
    "\007\uffea\017\uffea\025\uffea\040\uffea\001\002\000\004\025" +
    "\307\001\002\000\004\045\310\001\002\000\006\026\312" +
    "\043\ufff2\001\002\000\004\043\315\001\002\000\004\046" +
    "\313\001\002\000\004\043\314\001\002\000\016\005\ufff0" +
    "\006\ufff0\007\ufff0\017\ufff0\025\ufff0\040\ufff0\001\002\000" +
    "\016\005\ufff1\006\ufff1\007\ufff1\017\ufff1\025\ufff1\040\ufff1" +
    "\001\002\000\006\025\320\045\317\001\002\000\004\026" +
    "\344\001\002\000\004\045\321\001\002\000\004\026\322" +
    "\001\002\000\004\045\323\001\002\000\004\043\324\001" +
    "\002\000\004\045\325\001\002\000\004\033\326\001\002" +
    "\000\004\045\327\001\002\000\004\043\330\001\002\000" +
    "\004\034\331\001\002\000\004\036\332\001\002\000\004" +
    "\037\333\001\002\000\006\014\046\045\053\001\002\000" +
    "\010\014\uffc1\040\uffc1\045\uffc1\001\002\000\010\014\uffbf" +
    "\040\uffbf\045\uffbf\001\002\000\010\014\uffc3\040\uffc3\045" +
    "\uffc3\001\002\000\010\014\046\040\340\045\053\001\002" +
    "\000\016\005\uffc6\006\uffc6\007\uffc6\017\uffc6\025\uffc6\040" +
    "\uffc6\001\002\000\010\014\uffc2\040\uffc2\045\uffc2\001\002" +
    "\000\010\014\uffc0\040\uffc0\045\uffc0\001\002\000\010\014" +
    "\uffc4\040\uffc4\045\uffc4\001\002\000\006\045\346\046\345" +
    "\001\002\000\004\043\361\001\002\000\004\043\347\001" +
    "\002\000\004\045\350\001\002\000\004\033\351\001\002" +
    "\000\004\045\352\001\002\000\004\043\353\001\002\000" +
    "\004\034\354\001\002\000\004\036\355\001\002\000\004" +
    "\037\356\001\002\000\006\014\046\045\053\001\002\000" +
    "\010\014\046\040\360\045\053\001\002\000\016\005\uffc7" +
    "\006\uffc7\007\uffc7\017\uffc7\025\uffc7\040\uffc7\001\002\000" +
    "\004\045\362\001\002\000\004\033\363\001\002\000\004" +
    "\046\364\001\002\000\004\043\365\001\002\000\004\034" +
    "\366\001\002\000\004\036\367\001\002\000\004\037\370" +
    "\001\002\000\006\014\046\045\053\001\002\000\010\014" +
    "\046\040\372\045\053\001\002\000\016\005\uffc5\006\uffc5" +
    "\007\uffc5\017\uffc5\025\uffc5\040\uffc5\001\002\000\006\026" +
    "\375\043\374\001\002\000\016\005\uffef\006\uffef\007\uffef" +
    "\017\uffef\025\uffef\040\uffef\001\002\000\004\046\376\001" +
    "\002\000\004\043\377\001\002\000\016\005\uffee\006\uffee" +
    "\007\uffee\017\uffee\025\uffee\040\uffee\001\002\000\016\005" +
    "\uffe7\006\uffe7\007\uffe7\017\uffe7\025\uffe7\040\uffe7\001\002" +
    "\000\016\005\uffe5\006\uffe5\007\uffe5\017\uffe5\025\uffe5\040" +
    "\uffe5\001\002\000\016\005\uffed\006\uffed\007\uffed\017\uffed" +
    "\025\uffed\040\uffed\001\002\000\016\005\uffe9\006\uffe9\007" +
    "\uffe9\017\uffe9\025\uffe9\040\uffe9\001\002\000\014\002\ufff3" +
    "\004\ufff3\015\ufff3\017\ufff3\025\ufff3\001\002\000\016\005" +
    "\uffeb\006\uffeb\007\uffeb\017\uffeb\025\uffeb\040\uffeb\001\002" +
    "\000\006\045\u0108\046\u0107\001\002\000\004\033\u011a\001" +
    "\002\000\004\033\u0109\001\002\000\006\045\u010b\046\u010a" +
    "\001\002\000\004\036\u0116\001\002\000\004\036\u010c\001" +
    "\002\000\004\037\u010d\001\002\000\006\014\046\045\053" +
    "\001\002\000\010\014\uffdb\040\uffdb\045\uffdb\001\002\000" +
    "\010\014\046\040\u0112\045\053\001\002\000\010\014\uffd9" +
    "\040\uffd9\045\uffd9\001\002\000\010\014\uffdd\040\uffdd\045" +
    "\uffdd\001\002\000\016\005\uffe2\006\uffe2\007\uffe2\017\uffe2" +
    "\025\uffe2\040\uffe2\001\002\000\010\014\uffdc\040\uffdc\045" +
    "\uffdc\001\002\000\010\014\uffda\040\uffda\045\uffda\001\002" +
    "\000\010\014\uffde\040\uffde\045\uffde\001\002\000\004\037" +
    "\u0117\001\002\000\006\014\046\045\053\001\002\000\010" +
    "\014\046\040\u0119\045\053\001\002\000\016\005\uffe0\006" +
    "\uffe0\007\uffe0\017\uffe0\025\uffe0\040\uffe0\001\002\000\006" +
    "\045\u011c\046\u011b\001\002\000\004\036\u0121\001\002\000" +
    "\004\036\u011d\001\002\000\004\037\u011e\001\002\000\006" +
    "\014\046\045\053\001\002\000\010\014\046\040\u0120\045" +
    "\053\001\002\000\016\005\uffdf\006\uffdf\007\uffdf\017\uffdf" +
    "\025\uffdf\040\uffdf\001\002\000\004\037\u0122\001\002\000" +
    "\006\014\046\045\053\001\002\000\010\014\046\040\u0124" +
    "\045\053\001\002\000\016\005\uffe1\006\uffe1\007\uffe1\017" +
    "\uffe1\025\uffe1\040\uffe1\001\002\000\004\045\u0126\001\002" +
    "\000\004\036\u0127\001\002\000\004\037\u0128\001\002\000" +
    "\004\021\u012a\001\002\000\004\040\u0143\001\002\000\004" +
    "\046\u012b\001\002\000\004\044\u012c\001\002\000\010\010" +
    "\u012f\022\u012e\023\u0130\001\002\000\004\040\uffb9\001\002" +
    "\000\004\035\u013d\001\002\000\004\035\u0137\001\002\000" +
    "\004\035\u0131\001\002\000\004\024\u0132\001\002\000\004" +
    "\036\u0133\001\002\000\004\043\u0134\001\002\000\014\010" +
    "\u012f\021\u012a\022\u012e\023\u0130\040\uffb5\001\002\000\004" +
    "\040\uffb6\001\002\000\004\040\uffb1\001\002\000\004\045" +
    "\u0138\001\002\000\004\036\u0139\001\002\000\004\043\u013a" +
    "\001\002\000\014\010\u012f\021\u012a\022\u012e\023\u0130\040" +
    "\uffb3\001\002\000\004\040\uffb4\001\002\000\004\040\uffb0" +
    "\001\002\000\004\024\u013e\001\002\000\004\036\u013f\001" +
    "\002\000\004\043\u0140\001\002\000\014\010\u012f\021\u012a" +
    "\022\u012e\023\u0130\040\uffb7\001\002\000\004\040\uffb8\001" +
    "\002\000\004\040\uffb2\001\002\000\016\005\uffba\006\uffba" +
    "\007\uffba\017\uffba\025\uffba\040\uffba\001\002\000\004\036" +
    "\u0145\001\002\000\004\037\u0146\001\002\000\004\045\u0148" +
    "\001\002\000\006\040\u015a\045\u015b\001\002\000\004\035" +
    "\u0149\001\002\000\006\045\u014b\046\u014a\001\002\000\004" +
    "\051\u0153\001\002\000\004\051\u014c\001\002\000\006\045" +
    "\u014e\046\u014d\001\002\000\004\036\u0151\001\002\000\004" +
    "\036\u014f\001\002\000\004\043\u0150\001\002\000\006\040" +
    "\uffad\045\uffad\001\002\000\004\043\u0152\001\002\000\006" +
    "\040\uffa9\045\uffa9\001\002\000\006\045\u0155\046\u0154\001" +
    "\002\000\004\036\u0158\001\002\000\004\036\u0156\001\002" +
    "\000\004\043\u0157\001\002\000\006\040\uffa7\045\uffa7\001" +
    "\002\000\004\043\u0159\001\002\000\006\040\uffab\045\uffab" +
    "\001\002\000\014\002\uffaf\004\uffaf\015\uffaf\017\uffaf\025" +
    "\uffaf\001\002\000\004\035\u015c\001\002\000\006\045\u015e" +
    "\046\u015d\001\002\000\004\051\u0166\001\002\000\004\051" +
    "\u015f\001\002\000\006\045\u0161\046\u0160\001\002\000\004" +
    "\036\u0164\001\002\000\004\036\u0162\001\002\000\004\043" +
    "\u0163\001\002\000\006\040\uffae\045\uffae\001\002\000\004" +
    "\043\u0165\001\002\000\006\040\uffaa\045\uffaa\001\002\000" +
    "\006\045\u0168\046\u0167\001\002\000\004\036\u016b\001\002" +
    "\000\004\036\u0169\001\002\000\004\043\u016a\001\002\000" +
    "\006\040\uffa8\045\uffa8\001\002\000\004\043\u016c\001\002" +
    "\000\006\040\uffac\045\uffac\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\014\002\006\003\004\004\005\023\012\025" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\254\004\253\023\257\025\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\030\017\032\026\031\001\001\000" +
    "\002\001\001\000\004\017\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\051\011\046\012\050\014\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\107\011\105\012\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\051\011\046\012\050\014\123\001" +
    "\001\000\010\010\107\011\105\012\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\051\011\046\012\050" +
    "\014\132\001\001\000\010\010\107\011\105\012\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\051" +
    "\011\046\012\050\014\136\001\001\000\010\010\107\011" +
    "\105\012\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\051\011" +
    "\046\012\050\014\144\001\001\000\010\010\107\011\105" +
    "\012\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\051" +
    "\011\046\012\050\014\161\001\001\000\010\010\107\011" +
    "\105\012\106\001\001\000\002\001\001\000\004\013\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\051\011\046\012\050\014\167\001\001\000\010\010\107" +
    "\011\105\012\106\001\001\000\002\001\001\000\004\013" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\051\011\046\012" +
    "\050\014\177\001\001\000\010\010\107\011\105\012\106" +
    "\001\001\000\002\001\001\000\004\013\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\051\011\046\012\050\014\221" +
    "\001\001\000\010\010\107\011\105\012\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\051\011\046\012" +
    "\050\014\230\001\001\000\010\010\107\011\105\012\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\051\011\046\012\050\014\234\001\001\000\010\010\107" +
    "\011\105\012\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\051" +
    "\011\046\012\050\014\242\001\001\000\010\010\107\011" +
    "\105\012\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\276\006\300\013\304\015\301\017" +
    "\272\020\303\027\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\u0101\013\u0104\015\u0102\017\377\027\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\335\011\333\012\334\016" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\342\011\340\012\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\335\011\333\012\334\016\356" +
    "\001\001\000\010\010\342\011\340\012\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\335\011\333\012\334" +
    "\016\370\001\001\000\010\010\342\011\340\012\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\u010e\010\u0110\011\u010d\012\u010f\001\001\000\002" +
    "\001\001\000\010\010\u0114\011\u0112\012\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\u0117\010\u0110\011\u010d\012\u010f\001\001" +
    "\000\010\010\u0114\011\u0112\012\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\u011e\010\u0110\011\u010d\012" +
    "\u010f\001\001\000\010\010\u0114\011\u0112\012\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u0122\010" +
    "\u0110\011\u010d\012\u010f\001\001\000\010\010\u0114\011\u0112" +
    "\012\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u012c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\u0134\022\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\u013a" +
    "\022\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\u0140\022\u0141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    
    public void report_error(String msm, Object valor){ 
        Frontend.Interfaz.PanelSalida.setText("Funciona:"+valor);
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  
  public void metodo(){
      
  }
  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_DISPLAY ::= Display parentesis_a parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_DISPLAY",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_KEYP ::= KeyPlayed parentesis_a pulsa Identificador parentesis_c Llave_a N_IF Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_KEYP",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_KEYP ::= KeyPlayed parentesis_a pulsa Identificador parentesis_c Llave_a N_IF_ELSE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_KEYP",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_KEYP ::= KeyPlayed parentesis_a pulsa Identificador parentesis_c Llave_a N_DISPLAY N_IF_ELSE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_KEYP",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_ST ::= Identificador parentesis_a Numero Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_ST ::= SENTENCIA_ST Identificador parentesis_a Numero Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_ST ::= Identificador parentesis_a Identificador Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_ST ::= SENTENCIA_ST Identificador parentesis_a Identificador Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_ST ::= Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_ST ::= SENTENCIA_ST Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_ST ::= Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_ST ::= SENTENCIA_ST Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // M_START ::= retnot star parentesis_a parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIAS_C ::= delay_ms parentesis_a Identificador parentesis_c P_coma SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIAS_C ::= output_low parentesis_a pines_B parentesis_c P_coma SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIAS_C ::= output_high parentesis_a pines_B parentesis_c P_coma SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIAS_C ::= delay_ms parentesis_a Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIAS_C ::= delay_ms parentesis_a Identificador parentesis_c P_coma SENTENCIAS_E 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS_C ::= output_low parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS_C ::= output_low parentesis_a pines_B parentesis_c P_coma SENTENCIAS_E 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIAS_C ::= output_high parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIAS_C ::= output_high parentesis_a pines_B parentesis_c P_coma SENTENCIAS_E 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS_E ::= caso Numero dosPuntos SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_E",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS_EVENT ::= event parentesis_a Identificador parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_IF_ELSE ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_IF_ELSE ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // N_IF_ELSE ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N_IF_ELSE ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS_FOR ::= DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS_FOR ::= SENTENCIAS_FOR DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS_FOR ::= N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS_FOR ::= SENTENCIAS_FOR N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS_FOR ::= N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS_FOR ::= SENTENCIAS_FOR N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_FOR ::= For parentesis_a Identificador Op_asig Numero P_coma Identificador Op_relacional Numero P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_FOR ::= For parentesis_a T_dato Identificador Op_asig Identificador P_coma Identificador Op_relacional Identificador P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_FOR ::= For parentesis_a Identificador Op_asig Identificador P_coma Identificador Op_relacional Identificador P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS_IF ::= DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS_IF ::= SENTENCIAS_IF DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS_IF ::= N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS_IF ::= SENTENCIAS_IF N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS_IF ::= N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS_IF ::= SENTENCIAS_IF N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_IF ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_CONTROLAR ::= Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_CONTROLAR ::= Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_OUTPUT ::= output_N parentesis_a pines_B Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS_W ::= DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAS_W ::= SENTENCIAS_W DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAS_W ::= N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS_W ::= SENTENCIAS_W N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS_W ::= N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS_W ::= SENTENCIAS_W N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_WHILE ::= While parentesis_a Numero Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_WHILE ::= While parentesis_a Identificador Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_WHILE ::= While parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS_R ::= SENTENCIAS_EVENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS_R ::= DECLARACION_N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS_R ::= SENTENCIAS_R DECLARACION_N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS_R ::= N_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS_R ::= SENTENCIAS_R N_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS_R ::= N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS_R ::= SENTENCIAS_R N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS_R ::= N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS_R ::= SENTENCIAS_R N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS_R ::= N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS_R ::= SENTENCIAS_R N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_N_METODO ::= T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_N_METODO ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_N_METODO ::= Final T_dato Identificador NT$1 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                System.out.print(sen);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= Final T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= Final T_dato Identificador NT$0 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
                System.out.print(sen);               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= M_START 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= INICIO M_START 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= N_KEYP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= INICIO N_KEYP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INICIO N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

