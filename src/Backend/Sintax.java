
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 07 13:07:35 MDT 2022
//----------------------------------------------------

package Backend;

import java_cup.runtime.Symbol;
import Frontend.Interfaz;
import Frontend.V_Identificadores;
import java.util.HashMap;
import java.util.regex.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 07 13:07:35 MDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\306\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\003\006\000\002\003\010\000\002\003\010\000\002" +
    "\003\005\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\010\000\002\003\010\000\002" +
    "\003\005\000\002\003\005\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\004\016" +
    "\000\002\004\015\000\002\004\016\000\002\004\016\000" +
    "\002\004\016\000\002\004\016\000\002\004\016\000\002" +
    "\004\016\000\002\004\016\000\002\004\016\000\002\004" +
    "\016\000\002\004\016\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\027\006\000\002\027\010\000\002\027\010" +
    "\000\002\027\005\000\002\027\007\000\002\027\007\000" +
    "\002\027\006\000\002\027\006\000\002\027\006\000\002" +
    "\027\006\000\002\027\006\000\002\027\006\000\002\027" +
    "\010\000\002\027\010\000\002\027\005\000\002\027\005" +
    "\000\002\027\007\000\002\027\007\000\002\027\007\000" +
    "\002\027\007\000\002\006\013\000\002\006\013\000\002" +
    "\006\013\000\002\006\013\000\002\006\012\000\002\006" +
    "\012\000\002\006\012\000\002\006\012\000\002\006\013" +
    "\000\002\006\013\000\002\006\013\000\002\006\013\000" +
    "\002\006\013\000\002\006\013\000\002\006\013\000\002" +
    "\007\004\000\002\007\003\000\002\007\004\000\002\007" +
    "\003\000\002\007\004\000\002\007\003\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\011\011\000\002\011\011\000\002\011\011\000\002\011" +
    "\011\000\002\011\011\000\002\011\011\000\002\011\011" +
    "\000\002\012\010\000\002\012\010\000\002\012\010\000" +
    "\002\012\010\000\002\012\010\000\002\012\010\000\002" +
    "\012\010\000\002\012\010\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\013\013\000\002\013\013" +
    "\000\002\013\013\000\002\013\013\000\002\013\012\000" +
    "\002\013\012\000\002\013\012\000\002\013\012\000\002" +
    "\013\013\000\002\013\013\000\002\013\013\000\002\013" +
    "\013\000\002\013\013\000\002\013\013\000\002\013\013" +
    "\000\002\015\021\000\002\015\022\000\002\015\021\000" +
    "\002\016\004\000\002\016\003\000\002\016\004\000\002" +
    "\016\003\000\002\016\004\000\002\016\003\000\002\017" +
    "\015\000\002\017\015\000\002\017\015\000\002\017\015" +
    "\000\002\020\011\000\002\020\010\000\002\020\011\000" +
    "\002\020\011\000\002\020\011\000\002\020\011\000\002" +
    "\020\011\000\002\021\006\000\002\021\007\000\002\022" +
    "\010\000\002\022\007\000\002\022\010\000\002\022\007" +
    "\000\002\022\010\000\002\022\007\000\002\023\011\000" +
    "\002\023\010\000\002\023\011\000\002\023\010\000\002" +
    "\023\011\000\002\023\011\000\002\023\011\000\002\031" +
    "\011\000\002\031\011\000\002\031\011\000\002\031\011" +
    "\000\002\031\011\000\002\031\011\000\002\031\011\000" +
    "\002\031\012\000\002\031\012\000\002\031\012\000\002" +
    "\031\012\000\002\031\012\000\002\031\012\000\002\031" +
    "\012\000\002\025\012\000\002\030\014\000\002\030\013" +
    "\000\002\030\014\000\002\030\013\000\002\030\014\000" +
    "\002\030\013\000\002\030\015\000\002\030\014\000\002" +
    "\030\015\000\002\030\014\000\002\030\015\000\002\030" +
    "\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u032c\000\016\003\013\004\004\015\011\017\016\025" +
    "\010\047\012\001\002\000\012\003\u02cd\011\u02ce\037\u02cc" +
    "\047\u02cf\001\002\000\020\002\ufffd\003\ufffd\004\ufffd\015" +
    "\ufffd\017\ufffd\025\ufffd\047\ufffd\001\002\000\020\002\uffff" +
    "\003\uffff\004\uffff\015\uffff\017\uffff\025\uffff\047\uffff\001" +
    "\002\000\020\002\u02c9\003\013\004\004\015\011\017\016" +
    "\025\010\047\012\001\002\000\006\003\u02b2\047\u02b3\001" +
    "\002\000\004\037\u0255\001\002\000\004\030\u0250\001\002" +
    "\000\010\011\040\025\041\047\042\001\002\000\020\002" +
    "\ufffb\003\ufffb\004\ufffb\015\ufffb\017\ufffb\025\ufffb\047\ufffb" +
    "\001\002\000\020\002\ufff9\003\ufff9\004\ufff9\015\ufff9\017" +
    "\ufff9\025\ufff9\047\ufff9\001\002\000\006\003\017\025\020" +
    "\001\002\000\004\047\036\001\002\000\006\003\021\047" +
    "\022\001\002\000\004\045\035\001\002\000\010\003\023" +
    "\030\025\045\024\001\002\000\020\002\uffeb\003\uffeb\004" +
    "\uffeb\015\uffeb\017\uffeb\025\uffeb\047\uffeb\001\002\000\020" +
    "\002\ufff8\003\ufff8\004\ufff8\015\ufff8\017\ufff8\025\ufff8\047" +
    "\ufff8\001\002\000\010\003\027\047\030\050\026\001\002" +
    "\000\006\003\034\045\033\001\002\000\004\045\032\001" +
    "\002\000\004\045\031\001\002\000\020\002\ufff6\003\ufff6" +
    "\004\ufff6\015\ufff6\017\ufff6\025\ufff6\047\ufff6\001\002\000" +
    "\020\002\uffea\003\uffea\004\uffea\015\uffea\017\uffea\025\uffea" +
    "\047\uffea\001\002\000\020\002\ufff7\003\ufff7\004\ufff7\015" +
    "\ufff7\017\ufff7\025\ufff7\047\ufff7\001\002\000\020\002\uffe9" +
    "\003\uffe9\004\uffe9\015\uffe9\017\uffe9\025\uffe9\047\uffe9\001" +
    "\002\000\020\002\uffec\003\uffec\004\uffec\015\uffec\017\uffec" +
    "\025\uffec\047\uffec\001\002\000\004\045\037\001\002\000" +
    "\020\002\uffed\003\uffed\004\uffed\015\uffed\017\uffed\025\uffed" +
    "\047\uffed\001\002\000\004\037\u0203\001\002\000\004\047" +
    "\u0201\001\002\000\010\030\045\037\043\045\044\001\002" +
    "\000\004\025\050\001\002\000\020\002\uffe8\003\uffe8\004" +
    "\uffe8\015\uffe8\017\uffe8\025\uffe8\047\uffe8\001\002\000\004" +
    "\050\046\001\002\000\004\045\047\001\002\000\020\002" +
    "\uffe6\003\uffe6\004\uffe6\015\uffe6\017\uffe6\025\uffe6\047\uffe6" +
    "\001\002\000\004\047\051\001\002\000\004\053\052\001" +
    "\002\000\004\025\053\001\002\000\004\047\054\001\002" +
    "\000\004\040\055\001\002\000\004\041\056\001\002\000" +
    "\022\003\072\005\070\006\062\007\061\017\075\020\060" +
    "\025\065\047\071\001\002\000\024\003\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\017\uffcf\020\uffcf\025\uffcf\042\uffcf\047\uffcf" +
    "\001\002\000\006\003\u01e9\037\u01e8\001\002\000\006\003" +
    "\u017e\037\u017d\001\002\000\006\003\u0140\037\u013f\001\002" +
    "\000\024\003\uffcd\005\uffcd\006\uffcd\007\uffcd\017\uffcd\020" +
    "\uffcd\025\uffcd\042\uffcd\047\uffcd\001\002\000\024\003\072" +
    "\005\070\006\062\007\061\017\075\020\060\025\065\042" +
    "\u013c\047\071\001\002\000\006\003\u0127\047\u0128\001\002" +
    "\000\024\003\uffd5\005\uffd5\006\uffd5\007\uffd5\017\uffd5\020" +
    "\uffd5\025\uffd5\042\uffd5\047\uffd5\001\002\000\024\003\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\017\uffd1\020\uffd1\025\uffd1\042" +
    "\uffd1\047\uffd1\001\002\000\004\037\372\001\002\000\004" +
    "\030\365\001\002\000\010\025\120\037\117\047\121\001" +
    "\002\000\024\003\uffcb\005\uffcb\006\uffcb\007\uffcb\017\uffcb" +
    "\020\uffcb\025\uffcb\042\uffcb\047\uffcb\001\002\000\024\003" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\017\uffd3\020\uffd3\025\uffd3" +
    "\042\uffd3\047\uffd3\001\002\000\006\003\076\025\077\001" +
    "\002\000\004\047\115\001\002\000\006\003\100\047\101" +
    "\001\002\000\004\045\114\001\002\000\010\003\103\030" +
    "\104\045\102\001\002\000\024\003\uffca\005\uffca\006\uffca" +
    "\007\uffca\017\uffca\020\uffca\025\uffca\042\uffca\047\uffca\001" +
    "\002\000\024\003\uffbf\005\uffbf\006\uffbf\007\uffbf\017\uffbf" +
    "\020\uffbf\025\uffbf\042\uffbf\047\uffbf\001\002\000\010\003" +
    "\106\047\107\050\105\001\002\000\006\003\112\045\113" +
    "\001\002\000\004\045\111\001\002\000\004\045\110\001" +
    "\002\000\024\003\uffc8\005\uffc8\006\uffc8\007\uffc8\017\uffc8" +
    "\020\uffc8\025\uffc8\042\uffc8\047\uffc8\001\002\000\024\003" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\017\uffbe\020\uffbe\025\uffbe" +
    "\042\uffbe\047\uffbe\001\002\000\024\003\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\017\uffbd\020\uffbd\025\uffbd\042\uffbd\047\uffbd" +
    "\001\002\000\024\003\uffc9\005\uffc9\006\uffc9\007\uffc9\017" +
    "\uffc9\020\uffc9\025\uffc9\042\uffc9\047\uffc9\001\002\000\024" +
    "\003\uffc0\005\uffc0\006\uffc0\007\uffc0\017\uffc0\020\uffc0\025" +
    "\uffc0\042\uffc0\047\uffc0\001\002\000\004\045\116\001\002" +
    "\000\024\003\uffc1\005\uffc1\006\uffc1\007\uffc1\017\uffc1\020" +
    "\uffc1\025\uffc1\042\uffc1\047\uffc1\001\002\000\004\047\130" +
    "\001\002\000\004\047\126\001\002\000\006\030\123\045" +
    "\122\001\002\000\024\003\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\017\uffbc\020\uffbc\025\uffbc\042\uffbc\047\uffbc\001\002\000" +
    "\004\050\124\001\002\000\004\045\125\001\002\000\024" +
    "\003\uffba\005\uffba\006\uffba\007\uffba\017\uffba\020\uffba\025" +
    "\uffba\042\uffba\047\uffba\001\002\000\004\045\127\001\002" +
    "\000\024\003\uffc2\005\uffc2\006\uffc2\007\uffc2\017\uffc2\020" +
    "\uffc2\025\uffc2\042\uffc2\047\uffc2\001\002\000\006\035\131" +
    "\040\132\001\002\000\004\047\204\001\002\000\004\041" +
    "\133\001\002\000\004\021\135\001\002\000\006\021\200" +
    "\042\177\001\002\000\004\050\136\001\002\000\004\046" +
    "\137\001\002\000\010\010\142\022\141\023\143\001\002" +
    "\000\014\010\161\021\uff65\022\160\023\162\042\uff65\001" +
    "\002\000\004\037\154\001\002\000\004\037\150\001\002" +
    "\000\004\037\144\001\002\000\004\024\145\001\002\000" +
    "\004\040\146\001\002\000\004\045\147\001\002\000\014" +
    "\010\uff60\021\uff60\022\uff60\023\uff60\042\uff60\001\002\000" +
    "\004\047\151\001\002\000\004\040\152\001\002\000\004" +
    "\045\153\001\002\000\014\010\uff5e\021\uff5e\022\uff5e\023" +
    "\uff5e\042\uff5e\001\002\000\004\024\155\001\002\000\004" +
    "\040\156\001\002\000\004\045\157\001\002\000\014\010" +
    "\uff62\021\uff62\022\uff62\023\uff62\042\uff62\001\002\000\004" +
    "\037\173\001\002\000\004\037\167\001\002\000\004\037" +
    "\163\001\002\000\004\024\164\001\002\000\004\040\165" +
    "\001\002\000\004\045\166\001\002\000\014\010\uff61\021" +
    "\uff61\022\uff61\023\uff61\042\uff61\001\002\000\004\047\170" +
    "\001\002\000\004\040\171\001\002\000\004\045\172\001" +
    "\002\000\014\010\uff5f\021\uff5f\022\uff5f\023\uff5f\042\uff5f" +
    "\001\002\000\004\024\174\001\002\000\004\040\175\001" +
    "\002\000\004\045\176\001\002\000\014\010\uff63\021\uff63" +
    "\022\uff63\023\uff63\042\uff63\001\002\000\024\003\uff6a\005" +
    "\uff6a\006\uff6a\007\uff6a\017\uff6a\020\uff6a\025\uff6a\042\uff6a" +
    "\047\uff6a\001\002\000\004\050\201\001\002\000\004\046" +
    "\202\001\002\000\010\010\142\022\141\023\143\001\002" +
    "\000\014\010\161\021\uff64\022\160\023\162\042\uff64\001" +
    "\002\000\004\040\205\001\002\000\004\041\206\001\002" +
    "\000\010\003\212\014\207\047\216\001\002\000\006\003" +
    "\334\037\333\001\002\000\004\042\332\001\002\000\012" +
    "\003\uffa4\014\uffa4\042\uffa4\047\uffa4\001\002\000\004\037" +
    "\317\001\002\000\012\003\uffa2\014\uffa2\042\uffa2\047\uffa2" +
    "\001\002\000\012\003\212\014\207\042\313\047\216\001" +
    "\002\000\012\003\uffa6\014\uffa6\042\uffa6\047\uffa6\001\002" +
    "\000\010\003\220\030\221\037\217\001\002\000\010\003" +
    "\267\047\270\050\266\001\002\000\004\047\256\001\002" +
    "\000\006\003\222\047\223\001\002\000\004\032\253\001" +
    "\002\000\014\003\226\031\230\032\224\033\227\034\225" +
    "\001\002\000\006\003\250\050\247\001\002\000\006\003" +
    "\244\050\243\001\002\000\004\050\241\001\002\000\006" +
    "\003\236\050\235\001\002\000\006\003\232\050\231\001" +
    "\002\000\004\045\234\001\002\000\004\045\233\001\002" +
    "\000\012\003\uff8b\014\uff8b\042\uff8b\047\uff8b\001\002\000" +
    "\012\003\uff92\014\uff92\042\uff92\047\uff92\001\002\000\004" +
    "\045\240\001\002\000\004\045\237\001\002\000\012\003" +
    "\uff8a\014\uff8a\042\uff8a\047\uff8a\001\002\000\012\003\uff91" +
    "\014\uff91\042\uff91\047\uff91\001\002\000\004\045\242\001" +
    "\002\000\012\003\uff8d\014\uff8d\042\uff8d\047\uff8d\001\002" +
    "\000\004\045\246\001\002\000\004\045\245\001\002\000" +
    "\012\003\uff89\014\uff89\042\uff89\047\uff89\001\002\000\012" +
    "\003\uff90\014\uff90\042\uff90\047\uff90\001\002\000\004\045" +
    "\252\001\002\000\004\045\251\001\002\000\012\003\uff8c" +
    "\014\uff8c\042\uff8c\047\uff8c\001\002\000\012\003\uff93\014" +
    "\uff93\042\uff93\047\uff93\001\002\000\004\050\254\001\002" +
    "\000\004\045\255\001\002\000\012\003\uff8e\014\uff8e\042" +
    "\uff8e\047\uff8e\001\002\000\006\032\257\053\260\001\002" +
    "\000\004\050\264\001\002\000\004\047\261\001\002\000" +
    "\004\040\262\001\002\000\004\045\263\001\002\000\012" +
    "\003\uff97\014\uff97\042\uff97\047\uff97\001\002\000\004\045" +
    "\265\001\002\000\012\003\uff8f\014\uff8f\042\uff8f\047\uff8f" +
    "\001\002\000\004\053\307\001\002\000\004\053\303\001" +
    "\002\000\006\003\271\053\272\001\002\000\004\047\300" +
    "\001\002\000\004\047\273\001\002\000\006\003\274\040" +
    "\275\001\002\000\004\045\277\001\002\000\004\045\276" +
    "\001\002\000\012\003\uff9a\014\uff9a\042\uff9a\047\uff9a\001" +
    "\002\000\012\003\uff94\014\uff94\042\uff94\047\uff94\001\002" +
    "\000\004\040\301\001\002\000\004\045\302\001\002\000" +
    "\012\003\uff95\014\uff95\042\uff95\047\uff95\001\002\000\004" +
    "\047\304\001\002\000\004\040\305\001\002\000\004\045" +
    "\306\001\002\000\012\003\uff96\014\uff96\042\uff96\047\uff96" +
    "\001\002\000\004\050\310\001\002\000\004\040\311\001" +
    "\002\000\004\045\312\001\002\000\012\003\uff99\014\uff99" +
    "\042\uff99\047\uff99\001\002\000\024\003\uffae\005\uffae\006" +
    "\uffae\007\uffae\017\uffae\020\uffae\025\uffae\042\uffae\047\uffae" +
    "\001\002\000\012\003\uffa5\014\uffa5\042\uffa5\047\uffa5\001" +
    "\002\000\012\003\uffa3\014\uffa3\042\uffa3\047\uffa3\001\002" +
    "\000\012\003\uffa7\014\uffa7\042\uffa7\047\uffa7\001\002\000" +
    "\006\024\320\047\321\001\002\000\004\053\326\001\002" +
    "\000\004\053\322\001\002\000\004\047\323\001\002\000" +
    "\004\040\324\001\002\000\004\045\325\001\002\000\012" +
    "\003\uff98\014\uff98\042\uff98\047\uff98\001\002\000\004\047" +
    "\327\001\002\000\004\040\330\001\002\000\004\045\331" +
    "\001\002\000\012\003\uffa0\014\uffa0\042\uffa0\047\uffa0\001" +
    "\002\000\024\003\uff80\005\uff80\006\uff80\007\uff80\017\uff80" +
    "\020\uff80\025\uff80\042\uff80\047\uff80\001\002\000\006\003" +
    "\343\024\342\001\002\000\004\024\335\001\002\000\004" +
    "\053\336\001\002\000\004\047\337\001\002\000\004\040" +
    "\340\001\002\000\004\045\341\001\002\000\012\003\uff9f" +
    "\014\uff9f\042\uff9f\047\uff9f\001\002\000\006\003\350\053" +
    "\351\001\002\000\004\053\344\001\002\000\004\047\345" +
    "\001\002\000\004\040\346\001\002\000\004\045\347\001" +
    "\002\000\012\003\uff9e\014\uff9e\042\uff9e\047\uff9e\001\002" +
    "\000\004\047\362\001\002\000\006\003\352\047\353\001" +
    "\002\000\004\040\360\001\002\000\006\003\354\040\355" +
    "\001\002\000\004\045\357\001\002\000\004\045\356\001" +
    "\002\000\012\003\uffa1\014\uffa1\042\uffa1\047\uffa1\001\002" +
    "\000\012\003\uff9b\014\uff9b\042\uff9b\047\uff9b\001\002\000" +
    "\004\045\361\001\002\000\012\003\uff9c\014\uff9c\042\uff9c" +
    "\047\uff9c\001\002\000\004\040\363\001\002\000\004\045" +
    "\364\001\002\000\012\003\uff9d\014\uff9d\042\uff9d\047\uff9d" +
    "\001\002\000\006\047\367\050\366\001\002\000\004\045" +
    "\371\001\002\000\004\045\370\001\002\000\024\003\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\017\uffc3\020\uffc3\025\uffc3\042" +
    "\uffc3\047\uffc3\001\002\000\024\003\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\017\uffc4\020\uffc4\025\uffc4\042\uffc4\047\uffc4\001" +
    "\002\000\006\025\373\047\374\001\002\000\004\047\u011a" +
    "\001\002\000\004\030\375\001\002\000\006\047\377\050" +
    "\376\001\002\000\004\045\u0110\001\002\000\004\045\u0100" +
    "\001\002\000\004\047\u0101\001\002\000\004\035\u0102\001" +
    "\002\000\004\047\u0103\001\002\000\004\045\u0104\001\002" +
    "\000\004\036\u0105\001\002\000\004\040\u0106\001\002\000" +
    "\004\041\u0107\001\002\000\010\003\212\014\207\047\216" +
    "\001\002\000\012\003\uff73\014\uff73\042\uff73\047\uff73\001" +
    "\002\000\012\003\uff71\014\uff71\042\uff71\047\uff71\001\002" +
    "\000\012\003\uff75\014\uff75\042\uff75\047\uff75\001\002\000" +
    "\012\003\212\014\207\042\u010c\047\216\001\002\000\024" +
    "\003\uff79\005\uff79\006\uff79\007\uff79\017\uff79\020\uff79\025" +
    "\uff79\042\uff79\047\uff79\001\002\000\012\003\uff74\014\uff74" +
    "\042\uff74\047\uff74\001\002\000\012\003\uff72\014\uff72\042" +
    "\uff72\047\uff72\001\002\000\012\003\uff76\014\uff76\042\uff76" +
    "\047\uff76\001\002\000\004\047\u0111\001\002\000\004\035" +
    "\u0112\001\002\000\004\050\u0113\001\002\000\004\045\u0114" +
    "\001\002\000\004\036\u0115\001\002\000\004\040\u0116\001" +
    "\002\000\004\041\u0117\001\002\000\010\003\212\014\207" +
    "\047\216\001\002\000\012\003\212\014\207\042\u0119\047" +
    "\216\001\002\000\024\003\uff77\005\uff77\006\uff77\007\uff77" +
    "\017\uff77\020\uff77\025\uff77\042\uff77\047\uff77\001\002\000" +
    "\004\030\u011b\001\002\000\004\047\u011c\001\002\000\004" +
    "\045\u011d\001\002\000\004\047\u011e\001\002\000\004\035" +
    "\u011f\001\002\000\004\047\u0120\001\002\000\004\045\u0121" +
    "\001\002\000\004\036\u0122\001\002\000\004\040\u0123\001" +
    "\002\000\004\041\u0124\001\002\000\010\003\212\014\207" +
    "\047\216\001\002\000\012\003\212\014\207\042\u0126\047" +
    "\216\001\002\000\024\003\uff78\005\uff78\006\uff78\007\uff78" +
    "\017\uff78\020\uff78\025\uff78\042\uff78\047\uff78\001\002\000" +
    "\006\030\u0135\045\u0134\001\002\000\010\003\u012a\030\u012b" +
    "\045\u0129\001\002\000\024\003\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\017\uffc7\020\uffc7\025\uffc7\042\uffc7\047\uffc7\001\002" +
    "\000\004\050\u0132\001\002\000\010\003\u012d\047\u012e\050" +
    "\u012c\001\002\000\004\045\u0131\001\002\000\004\045\u0130" +
    "\001\002\000\004\045\u012f\001\002\000\024\003\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\017\uffc5\020\uffc5\025\uffc5\042\uffc5" +
    "\047\uffc5\001\002\000\024\003\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\017\uffb7\020\uffb7\025\uffb7\042\uffb7\047\uffb7\001\002" +
    "\000\024\003\uffc6\005\uffc6\006\uffc6\007\uffc6\017\uffc6\020" +
    "\uffc6\025\uffc6\042\uffc6\047\uffc6\001\002\000\004\045\u0133" +
    "\001\002\000\024\003\uffb9\005\uffb9\006\uffb9\007\uffb9\017" +
    "\uffb9\020\uffb9\025\uffb9\042\uffb9\047\uffb9\001\002\000\024" +
    "\003\uffbb\005\uffbb\006\uffbb\007\uffbb\017\uffbb\020\uffbb\025" +
    "\uffbb\042\uffbb\047\uffbb\001\002\000\004\050\u0136\001\002" +
    "\000\004\045\u0137\001\002\000\024\003\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\017\uffb8\020\uffb8\025\uffb8\042\uffb8\047\uffb8" +
    "\001\002\000\024\003\uffd0\005\uffd0\006\uffd0\007\uffd0\017" +
    "\uffd0\020\uffd0\025\uffd0\042\uffd0\047\uffd0\001\002\000\024" +
    "\003\uffce\005\uffce\006\uffce\007\uffce\017\uffce\020\uffce\025" +
    "\uffce\042\uffce\047\uffce\001\002\000\024\003\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\017\uffd6\020\uffd6\025\uffd6\042\uffd6\047" +
    "\uffd6\001\002\000\024\003\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\017\uffd2\020\uffd2\025\uffd2\042\uffd2\047\uffd2\001\002\000" +
    "\020\002\uffe0\003\uffe0\004\uffe0\015\uffe0\017\uffe0\025\uffe0" +
    "\047\uffe0\001\002\000\024\003\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\017\uffcc\020\uffcc\025\uffcc\042\uffcc\047\uffcc\001\002" +
    "\000\024\003\uffd4\005\uffd4\006\uffd4\007\uffd4\017\uffd4\020" +
    "\uffd4\025\uffd4\042\uffd4\047\uffd4\001\002\000\010\003\u0149" +
    "\047\u014a\050\u0148\001\002\000\004\047\u0141\001\002\000" +
    "\004\035\u0142\001\002\000\004\047\u0143\001\002\000\004" +
    "\040\u0144\001\002\000\004\041\u0145\001\002\000\010\003" +
    "\212\014\207\047\216\001\002\000\012\003\212\014\207" +
    "\042\u0147\047\216\001\002\000\024\003\uffad\005\uffad\006" +
    "\uffad\007\uffad\017\uffad\020\uffad\025\uffad\042\uffad\047\uffad" +
    "\001\002\000\004\035\u0170\001\002\000\004\035\u016a\001" +
    "\002\000\006\003\u014b\035\u014c\001\002\000\004\047\u0165" +
    "\001\002\000\010\003\u014e\047\u014f\050\u014d\001\002\000" +
    "\004\040\u0160\001\002\000\004\040\u015c\001\002\000\006" +
    "\003\u0150\040\u0151\001\002\000\004\041\u0159\001\002\000" +
    "\006\003\u0153\041\u0152\001\002\000\012\003\212\014\207" +
    "\042\u0156\047\216\001\002\000\010\003\212\014\207\047" +
    "\216\001\002\000\012\003\212\014\207\042\u0155\047\216" +
    "\001\002\000\024\003\uffa8\005\uffa8\006\uffa8\007\uffa8\017" +
    "\uffa8\020\uffa8\025\uffa8\042\uffa8\047\uffa8\001\002\000\024" +
    "\003\uffb2\005\uffb2\006\uffb2\007\uffb2\017\uffb2\020\uffb2\025" +
    "\uffb2\042\uffb2\047\uffb2\001\002\000\012\003\212\014\207" +
    "\042\u0158\047\216\001\002\000\024\003\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\017\uffb6\020\uffb6\025\uffb6\042\uffb6\047\uffb6" +
    "\001\002\000\010\003\212\014\207\047\216\001\002\000" +
    "\012\003\212\014\207\042\u015b\047\216\001\002\000\024" +
    "\003\uffa9\005\uffa9\006\uffa9\007\uffa9\017\uffa9\020\uffa9\025" +
    "\uffa9\042\uffa9\047\uffa9\001\002\000\004\041\u015d\001\002" +
    "\000\010\003\212\014\207\047\216\001\002\000\012\003" +
    "\212\014\207\042\u015f\047\216\001\002\000\024\003\uffaa" +
    "\005\uffaa\006\uffaa\007\uffaa\017\uffaa\020\uffaa\025\uffaa\042" +
    "\uffaa\047\uffaa\001\002\000\004\041\u0161\001\002\000\012" +
    "\003\212\014\207\042\u0162\047\216\001\002\000\024\003" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\017\uffb0\020\uffb0\025\uffb0" +
    "\042\uffb0\047\uffb0\001\002\000\012\003\212\014\207\042" +
    "\u0164\047\216\001\002\000\024\003\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\017\uffb4\020\uffb4\025\uffb4\042\uffb4\047\uffb4\001" +
    "\002\000\004\040\u0166\001\002\000\004\041\u0167\001\002" +
    "\000\010\003\212\014\207\047\216\001\002\000\012\003" +
    "\212\014\207\042\u0169\047\216\001\002\000\024\003\uffab" +
    "\005\uffab\006\uffab\007\uffab\017\uffab\020\uffab\025\uffab\042" +
    "\uffab\047\uffab\001\002\000\004\047\u016b\001\002\000\004" +
    "\040\u016c\001\002\000\004\041\u016d\001\002\000\010\003" +
    "\212\014\207\047\216\001\002\000\012\003\212\014\207" +
    "\042\u016f\047\216\001\002\000\024\003\uffac\005\uffac\006" +
    "\uffac\007\uffac\017\uffac\020\uffac\025\uffac\042\uffac\047\uffac" +
    "\001\002\000\006\047\u0172\050\u0171\001\002\000\004\040" +
    "\u0178\001\002\000\004\040\u0173\001\002\000\004\041\u0174" +
    "\001\002\000\012\003\212\014\207\042\u0175\047\216\001" +
    "\002\000\024\003\uffaf\005\uffaf\006\uffaf\007\uffaf\017\uffaf" +
    "\020\uffaf\025\uffaf\042\uffaf\047\uffaf\001\002\000\012\003" +
    "\212\014\207\042\u0177\047\216\001\002\000\024\003\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\017\uffb3\020\uffb3\025\uffb3\042" +
    "\uffb3\047\uffb3\001\002\000\004\041\u0179\001\002\000\012" +
    "\003\212\014\207\042\u017a\047\216\001\002\000\024\003" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\017\uffb1\020\uffb1\025\uffb1" +
    "\042\uffb1\047\uffb1\001\002\000\012\003\212\014\207\042" +
    "\u017c\047\216\001\002\000\024\003\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\017\uffb5\020\uffb5\025\uffb5\042\uffb5\047\uffb5\001" +
    "\002\000\012\003\u0187\047\u0189\050\u0186\052\u0188\001\002" +
    "\000\004\047\u017f\001\002\000\004\035\u0180\001\002\000" +
    "\004\047\u0181\001\002\000\004\040\u0182\001\002\000\004" +
    "\041\u0183\001\002\000\010\003\212\014\207\047\216\001" +
    "\002\000\012\003\212\014\207\042\u0185\047\216\001\002" +
    "\000\024\003\uff7f\005\uff7f\006\uff7f\007\uff7f\017\uff7f\020" +
    "\uff7f\025\uff7f\042\uff7f\047\uff7f\001\002\000\004\035\u01e0" +
    "\001\002\000\004\035\u01da\001\002\000\004\035\u01cb\001" +
    "\002\000\006\003\u018a\035\u018b\001\002\000\004\047\u01c6" +
    "\001\002\000\006\003\u018c\047\u018d\001\002\000\004\040" +
    "\u01c2\001\002\000\006\003\u018e\040\u018f\001\002\000\004" +
    "\041\u01bf\001\002\000\006\003\u0191\041\u0190\001\002\000" +
    "\012\003\212\014\207\042\u0196\047\216\001\002\000\010" +
    "\003\212\014\207\047\216\001\002\000\012\003\212\014" +
    "\207\042\u0193\047\216\001\002\000\024\003\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\017\uff7a\020\uff7a\025\uff7a\042\uff7a\047" +
    "\uff7a\001\002\000\012\003\212\014\207\042\u01be\047\216" +
    "\001\002\000\004\042\u0197\001\002\000\024\003\uff84\005" +
    "\uff84\006\uff84\007\uff84\017\uff84\020\uff84\025\uff84\042\uff84" +
    "\047\uff84\001\002\000\004\012\u0198\001\002\000\006\003" +
    "\u019a\007\u019b\001\002\000\024\003\uff70\005\uff70\006\uff70" +
    "\007\uff70\017\uff70\020\uff70\025\uff70\042\uff70\047\uff70\001" +
    "\002\000\004\037\u01b8\001\002\000\006\003\u017e\037\u019c" +
    "\001\002\000\012\003\u0187\047\u019f\050\u019d\052\u019e\001" +
    "\002\000\004\035\u01b1\001\002\000\004\035\u01a4\001\002" +
    "\000\006\003\u018a\035\u01a0\001\002\000\006\003\u018c\047" +
    "\u01a1\001\002\000\006\003\u018e\040\u01a2\001\002\000\006" +
    "\003\u0191\041\u01a3\001\002\000\012\003\212\014\207\042" +
    "\u0196\047\216\001\002\000\006\047\u01a6\050\u01a5\001\002" +
    "\000\004\040\u01ac\001\002\000\004\040\u01a7\001\002\000" +
    "\004\041\u01a8\001\002\000\012\003\212\014\207\042\u01a9" +
    "\047\216\001\002\000\024\003\uff82\005\uff82\006\uff82\007" +
    "\uff82\017\uff82\020\uff82\025\uff82\042\uff82\047\uff82\001\002" +
    "\000\012\003\212\014\207\042\u01ab\047\216\001\002\000" +
    "\024\003\uff86\005\uff86\006\uff86\007\uff86\017\uff86\020\uff86" +
    "\025\uff86\042\uff86\047\uff86\001\002\000\004\041\u01ad\001" +
    "\002\000\012\003\212\014\207\042\u01ae\047\216\001\002" +
    "\000\024\003\uff81\005\uff81\006\uff81\007\uff81\017\uff81\020" +
    "\uff81\025\uff81\042\uff81\047\uff81\001\002\000\012\003\212" +
    "\014\207\042\u01b0\047\216\001\002\000\024\003\uff85\005" +
    "\uff85\006\uff85\007\uff85\017\uff85\020\uff85\025\uff85\042\uff85" +
    "\047\uff85\001\002\000\004\050\u01b2\001\002\000\004\040" +
    "\u01b3\001\002\000\004\041\u01b4\001\002\000\012\003\212" +
    "\014\207\042\u01b5\047\216\001\002\000\024\003\uff83\005" +
    "\uff83\006\uff83\007\uff83\017\uff83\020\uff83\025\uff83\042\uff83" +
    "\047\uff83\001\002\000\012\003\212\014\207\042\u01b7\047" +
    "\216\001\002\000\024\003\uff87\005\uff87\006\uff87\007\uff87" +
    "\017\uff87\020\uff87\025\uff87\042\uff87\047\uff87\001\002\000" +
    "\004\047\u01b9\001\002\000\004\035\u01ba\001\002\000\004" +
    "\047\u01bb\001\002\000\004\040\u01bc\001\002\000\004\041" +
    "\u01bd\001\002\000\002\001\002\000\024\003\uff88\005\uff88" +
    "\006\uff88\007\uff88\017\uff88\020\uff88\025\uff88\042\uff88\047" +
    "\uff88\001\002\000\010\003\212\014\207\047\216\001\002" +
    "\000\012\003\212\014\207\042\u01c1\047\216\001\002\000" +
    "\024\003\uff7b\005\uff7b\006\uff7b\007\uff7b\017\uff7b\020\uff7b" +
    "\025\uff7b\042\uff7b\047\uff7b\001\002\000\004\041\u01c3\001" +
    "\002\000\010\003\212\014\207\047\216\001\002\000\012" +
    "\003\212\014\207\042\u01c5\047\216\001\002\000\024\003" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\017\uff7c\020\uff7c\025\uff7c" +
    "\042\uff7c\047\uff7c\001\002\000\004\040\u01c7\001\002\000" +
    "\004\041\u01c8\001\002\000\010\003\212\014\207\047\216" +
    "\001\002\000\012\003\212\014\207\042\u01ca\047\216\001" +
    "\002\000\024\003\uff7d\005\uff7d\006\uff7d\007\uff7d\017\uff7d" +
    "\020\uff7d\025\uff7d\042\uff7d\047\uff7d\001\002\000\006\047" +
    "\u01cd\050\u01cc\001\002\000\004\040\u01d4\001\002\000\004" +
    "\040\u01ce\001\002\000\004\041\u01cf\001\002\000\012\003" +
    "\212\014\207\042\u01a9\047\216\001\002\000\004\042\u01d1" +
    "\001\002\000\004\012\u01d2\001\002\000\006\003\u019a\007" +
    "\u019b\001\002\000\024\003\uff6e\005\uff6e\006\uff6e\007\uff6e" +
    "\017\uff6e\020\uff6e\025\uff6e\042\uff6e\047\uff6e\001\002\000" +
    "\004\041\u01d5\001\002\000\012\003\212\014\207\042\u01ae" +
    "\047\216\001\002\000\004\042\u01d7\001\002\000\004\012" +
    "\u01d8\001\002\000\006\003\u019a\007\u019b\001\002\000\024" +
    "\003\uff6d\005\uff6d\006\uff6d\007\uff6d\017\uff6d\020\uff6d\025" +
    "\uff6d\042\uff6d\047\uff6d\001\002\000\004\047\u01db\001\002" +
    "\000\004\040\u01dc\001\002\000\004\041\u01dd\001\002\000" +
    "\010\003\212\014\207\047\216\001\002\000\012\003\212" +
    "\014\207\042\u01df\047\216\001\002\000\024\003\uff7e\005" +
    "\uff7e\006\uff7e\007\uff7e\017\uff7e\020\uff7e\025\uff7e\042\uff7e" +
    "\047\uff7e\001\002\000\004\050\u01e1\001\002\000\004\040" +
    "\u01e2\001\002\000\004\041\u01e3\001\002\000\012\003\212" +
    "\014\207\042\u01b5\047\216\001\002\000\004\042\u01e5\001" +
    "\002\000\004\012\u01e6\001\002\000\006\003\u019a\007\u019b" +
    "\001\002\000\024\003\uff6f\005\uff6f\006\uff6f\007\uff6f\017" +
    "\uff6f\020\uff6f\025\uff6f\042\uff6f\047\uff6f\001\002\000\006" +
    "\003\u01ef\047\u01f0\001\002\000\004\047\u01ea\001\002\000" +
    "\004\040\u01eb\001\002\000\004\041\u01ec\001\002\000\004" +
    "\021\135\001\002\000\006\021\200\042\u01ee\001\002\000" +
    "\024\003\uff69\005\uff69\006\uff69\007\uff69\017\uff69\020\uff69" +
    "\025\uff69\042\uff69\047\uff69\001\002\000\004\040\u01fd\001" +
    "\002\000\006\003\u01f1\040\u01f2\001\002\000\004\041\u01fa" +
    "\001\002\000\006\003\u01f4\041\u01f3\001\002\000\006\021" +
    "\135\042\u01f7\001\002\000\004\021\135\001\002\000\006" +
    "\021\200\042\u01f6\001\002\000\024\003\uff66\005\uff66\006" +
    "\uff66\007\uff66\017\uff66\020\uff66\025\uff66\042\uff66\047\uff66" +
    "\001\002\000\024\003\uff6b\005\uff6b\006\uff6b\007\uff6b\017" +
    "\uff6b\020\uff6b\025\uff6b\042\uff6b\047\uff6b\001\002\000\006" +
    "\021\200\042\u01f9\001\002\000\024\003\uff6c\005\uff6c\006" +
    "\uff6c\007\uff6c\017\uff6c\020\uff6c\025\uff6c\042\uff6c\047\uff6c" +
    "\001\002\000\004\021\135\001\002\000\006\021\200\042" +
    "\u01fc\001\002\000\024\003\uff67\005\uff67\006\uff67\007\uff67" +
    "\017\uff67\020\uff67\025\uff67\042\uff67\047\uff67\001\002\000" +
    "\004\041\u01fe\001\002\000\004\021\135\001\002\000\006" +
    "\021\200\042\u0200\001\002\000\024\003\uff68\005\uff68\006" +
    "\uff68\007\uff68\017\uff68\020\uff68\025\uff68\042\uff68\047\uff68" +
    "\001\002\000\004\045\u0202\001\002\000\020\002\uffee\003" +
    "\uffee\004\uffee\015\uffee\017\uffee\025\uffee\047\uffee\001\002" +
    "\000\004\040\u0204\001\002\000\004\041\u0205\001\002\000" +
    "\006\003\u0206\047\u0208\001\002\000\004\037\u024a\001\002" +
    "\000\010\003\u0226\042\u0225\047\u0227\001\002\000\006\003" +
    "\u020a\037\u0209\001\002\000\010\003\u0211\047\u0212\050\u0210" +
    "\001\002\000\004\047\u020b\001\002\000\004\053\u020c\001" +
    "\002\000\004\047\u020d\001\002\000\004\040\u020e\001\002" +
    "\000\004\045\u020f\001\002\000\010\003\uff53\042\uff53\047" +
    "\uff53\001\002\000\004\053\u0221\001\002\000\004\053\u021d" +
    "\001\002\000\006\003\u0213\053\u0214\001\002\000\004\047" +
    "\u021a\001\002\000\004\047\u0215\001\002\000\006\003\u0216" +
    "\040\u0217\001\002\000\004\045\u0219\001\002\000\004\045" +
    "\u0218\001\002\000\010\003\uff56\042\uff56\047\uff56\001\002" +
    "\000\010\003\uff50\042\uff50\047\uff50\001\002\000\004\040" +
    "\u021b\001\002\000\004\045\u021c\001\002\000\010\003\uff51" +
    "\042\uff51\047\uff51\001\002\000\004\047\u021e\001\002\000" +
    "\004\040\u021f\001\002\000\004\045\u0220\001\002\000\010" +
    "\003\uff52\042\uff52\047\uff52\001\002\000\004\050\u0222\001" +
    "\002\000\004\040\u0223\001\002\000\004\045\u0224\001\002" +
    "\000\010\003\uff55\042\uff55\047\uff55\001\002\000\020\002" +
    "\uff5b\003\uff5b\004\uff5b\015\uff5b\017\uff5b\025\uff5b\047\uff5b" +
    "\001\002\000\004\037\u0244\001\002\000\006\003\u0229\037" +
    "\u0228\001\002\000\010\003\u0230\047\u0231\050\u022f\001\002" +
    "\000\004\047\u022a\001\002\000\004\053\u022b\001\002\000" +
    "\004\047\u022c\001\002\000\004\040\u022d\001\002\000\004" +
    "\045\u022e\001\002\000\010\003\uff4c\042\uff4c\047\uff4c\001" +
    "\002\000\004\053\u0240\001\002\000\004\053\u023c\001\002" +
    "\000\006\003\u0232\053\u0233\001\002\000\004\047\u0239\001" +
    "\002\000\004\047\u0234\001\002\000\006\003\u0235\040\u0236" +
    "\001\002\000\004\045\u0238\001\002\000\004\045\u0237\001" +
    "\002\000\010\003\uff4f\042\uff4f\047\uff4f\001\002\000\010" +
    "\003\uff49\042\uff49\047\uff49\001\002\000\004\040\u023a\001" +
    "\002\000\004\045\u023b\001\002\000\010\003\uff4a\042\uff4a" +
    "\047\uff4a\001\002\000\004\047\u023d\001\002\000\004\040" +
    "\u023e\001\002\000\004\045\u023f\001\002\000\010\003\uff4b" +
    "\042\uff4b\047\uff4b\001\002\000\004\050\u0241\001\002\000" +
    "\004\040\u0242\001\002\000\004\045\u0243\001\002\000\010" +
    "\003\uff4e\042\uff4e\047\uff4e\001\002\000\004\047\u0245\001" +
    "\002\000\004\053\u0246\001\002\000\004\047\u0247\001\002" +
    "\000\004\040\u0248\001\002\000\004\045\u0249\001\002\000" +
    "\010\003\uff4d\042\uff4d\047\uff4d\001\002\000\004\047\u024b" +
    "\001\002\000\004\053\u024c\001\002\000\004\047\u024d\001" +
    "\002\000\004\040\u024e\001\002\000\004\045\u024f\001\002" +
    "\000\010\003\uff54\042\uff54\047\uff54\001\002\000\006\047" +
    "\u0252\050\u0251\001\002\000\004\045\u0254\001\002\000\004" +
    "\045\u0253\001\002\000\020\002\uffef\003\uffef\004\uffef\015" +
    "\uffef\017\uffef\025\uffef\047\uffef\001\002\000\020\002\ufff0" +
    "\003\ufff0\004\ufff0\015\ufff0\017\ufff0\025\ufff0\047\ufff0\001" +
    "\002\000\004\013\u0256\001\002\000\004\047\u0257\001\002" +
    "\000\004\040\u0258\001\002\000\004\041\u0259\001\002\000" +
    "\006\007\u025c\012\u025b\001\002\000\010\007\u0288\012\u0287" +
    "\042\u0286\001\002\000\004\007\u0271\001\002\000\004\037" +
    "\u025d\001\002\000\006\047\u025f\052\u025e\001\002\000\004" +
    "\035\u026b\001\002\000\004\035\u0260\001\002\000\006\047" +
    "\u0262\052\u0261\001\002\000\004\040\u0267\001\002\000\004" +
    "\040\u0263\001\002\000\004\041\u0264\001\002\000\002\001" +
    "\002\000\004\042\u0266\001\002\000\010\007\uff46\012\uff46" +
    "\042\uff46\001\002\000\004\041\u0268\001\002\000\002\001" +
    "\002\000\004\042\u026a\001\002\000\010\007\uff42\012\uff42" +
    "\042\uff42\001\002\000\004\047\u026c\001\002\000\004\040" +
    "\u026d\001\002\000\004\041\u026e\001\002\000\002\001\002" +
    "\000\004\042\u0270\001\002\000\010\007\uff44\012\uff44\042" +
    "\uff44\001\002\000\004\037\u0272\001\002\000\006\047\u0274" +
    "\052\u0273\001\002\000\004\035\u0280\001\002\000\004\035" +
    "\u0275\001\002\000\006\047\u0277\052\u0276\001\002\000\004" +
    "\040\u027c\001\002\000\004\040\u0278\001\002\000\004\041" +
    "\u0279\001\002\000\002\001\002\000\004\042\u027b\001\002" +
    "\000\010\007\uff40\012\uff40\042\uff40\001\002\000\004\041" +
    "\u027d\001\002\000\002\001\002\000\004\042\u027f\001\002" +
    "\000\010\007\uff3c\012\uff3c\042\uff3c\001\002\000\004\047" +
    "\u0281\001\002\000\004\040\u0282\001\002\000\004\041\u0283" +
    "\001\002\000\002\001\002\000\004\042\u0285\001\002\000" +
    "\010\007\uff3e\012\uff3e\042\uff3e\001\002\000\020\002\uff48" +
    "\003\uff48\004\uff48\015\uff48\017\uff48\025\uff48\047\uff48\001" +
    "\002\000\004\007\u029d\001\002\000\004\037\u0289\001\002" +
    "\000\006\047\u028b\052\u028a\001\002\000\004\035\u0297\001" +
    "\002\000\004\035\u028c\001\002\000\006\047\u028e\052\u028d" +
    "\001\002\000\004\040\u0293\001\002\000\004\040\u028f\001" +
    "\002\000\004\041\u0290\001\002\000\002\001\002\000\004" +
    "\042\u0292\001\002\000\010\007\uff47\012\uff47\042\uff47\001" +
    "\002\000\004\041\u0294\001\002\000\002\001\002\000\004" +
    "\042\u0296\001\002\000\010\007\uff43\012\uff43\042\uff43\001" +
    "\002\000\004\047\u0298\001\002\000\004\040\u0299\001\002" +
    "\000\004\041\u029a\001\002\000\002\001\002\000\004\042" +
    "\u029c\001\002\000\010\007\uff45\012\uff45\042\uff45\001\002" +
    "\000\004\037\u029e\001\002\000\006\047\u02a0\052\u029f\001" +
    "\002\000\004\035\u02ac\001\002\000\004\035\u02a1\001\002" +
    "\000\006\047\u02a3\052\u02a2\001\002\000\004\040\u02a8\001" +
    "\002\000\004\040\u02a4\001\002\000\004\041\u02a5\001\002" +
    "\000\002\001\002\000\004\042\u02a7\001\002\000\010\007" +
    "\uff41\012\uff41\042\uff41\001\002\000\004\041\u02a9\001\002" +
    "\000\002\001\002\000\004\042\u02ab\001\002\000\010\007" +
    "\uff3d\012\uff3d\042\uff3d\001\002\000\004\047\u02ad\001\002" +
    "\000\004\040\u02ae\001\002\000\004\041\u02af\001\002\000" +
    "\002\001\002\000\004\042\u02b1\001\002\000\010\007\uff3f" +
    "\012\uff3f\042\uff3f\001\002\000\006\030\u02c4\045\u02c3\001" +
    "\002\000\010\003\u02b4\030\u02b6\045\u02b5\001\002\000\004" +
    "\050\u02c1\001\002\000\020\002\ufff5\003\ufff5\004\ufff5\015" +
    "\ufff5\017\ufff5\025\ufff5\047\ufff5\001\002\000\014\003\u02b9" +
    "\026\u02ba\027\u02b8\047\u02bb\050\u02b7\001\002\000\004\045" +
    "\u02c0\001\002\000\004\045\u02bf\001\002\000\004\045\u02be" +
    "\001\002\000\004\045\u02bd\001\002\000\004\045\u02bc\001" +
    "\002\000\020\002\ufff1\003\ufff1\004\ufff1\015\ufff1\017\ufff1" +
    "\025\ufff1\047\ufff1\001\002\000\020\002\ufff3\003\ufff3\004" +
    "\ufff3\015\ufff3\017\ufff3\025\ufff3\047\ufff3\001\002\000\020" +
    "\002\uffe3\003\uffe3\004\uffe3\015\uffe3\017\uffe3\025\uffe3\047" +
    "\uffe3\001\002\000\020\002\ufff2\003\ufff2\004\ufff2\015\ufff2" +
    "\017\ufff2\025\ufff2\047\ufff2\001\002\000\020\002\ufff4\003" +
    "\ufff4\004\ufff4\015\ufff4\017\ufff4\025\ufff4\047\ufff4\001\002" +
    "\000\004\045\u02c2\001\002\000\020\002\uffe5\003\uffe5\004" +
    "\uffe5\015\uffe5\017\uffe5\025\uffe5\047\uffe5\001\002\000\020" +
    "\002\uffe7\003\uffe7\004\uffe7\015\uffe7\017\uffe7\025\uffe7\047" +
    "\uffe7\001\002\000\004\050\u02c5\001\002\000\004\045\u02c6" +
    "\001\002\000\020\002\uffe4\003\uffe4\004\uffe4\015\uffe4\017" +
    "\uffe4\025\uffe4\047\uffe4\001\002\000\020\002\ufffe\003\ufffe" +
    "\004\ufffe\015\ufffe\017\ufffe\025\ufffe\047\ufffe\001\002\000" +
    "\020\002\000\003\000\004\000\015\000\017\000\025\000" +
    "\047\000\001\002\000\004\002\001\001\002\000\020\002" +
    "\ufffc\003\ufffc\004\ufffc\015\ufffc\017\ufffc\025\ufffc\047\ufffc" +
    "\001\002\000\020\002\ufffa\003\ufffa\004\ufffa\015\ufffa\017" +
    "\ufffa\025\ufffa\047\ufffa\001\002\000\004\040\u032b\001\002" +
    "\000\004\037\u0321\001\002\000\006\003\u0310\037\u030f\001" +
    "\002\000\006\003\u02d1\037\u02d0\001\002\000\006\003\u02db" +
    "\025\u02dc\001\002\000\004\025\u02d2\001\002\000\004\047" +
    "\u02d3\001\002\000\004\053\u02d4\001\002\000\004\025\u02d5" +
    "\001\002\000\004\047\u02d6\001\002\000\004\040\u02d7\001" +
    "\002\000\004\041\u02d8\001\002\000\022\003\072\005\070" +
    "\006\062\007\061\017\075\020\060\025\065\047\071\001" +
    "\002\000\024\003\072\005\070\006\062\007\061\017\075" +
    "\020\060\025\065\042\u02da\047\071\001\002\000\020\002" +
    "\uffde\003\uffde\004\uffde\015\uffde\017\uffde\025\uffde\047\uffde" +
    "\001\002\000\004\047\u0307\001\002\000\006\003\u02dd\047" +
    "\u02de\001\002\000\004\053\u0300\001\002\000\006\003\u02df" +
    "\053\u02e0\001\002\000\004\025\u02fa\001\002\000\006\003" +
    "\u02e1\025\u02e2\001\002\000\004\047\u02f5\001\002\000\006" +
    "\003\u02e3\047\u02e4\001\002\000\004\040\u02f1\001\002\000" +
    "\006\003\u02e5\040\u02e6\001\002\000\004\041\u02ee\001\002" +
    "\000\006\003\u02e8\041\u02e7\001\002\000\024\003\072\005" +
    "\070\006\062\007\061\017\075\020\060\025\065\042\u02ec" +
    "\047\071\001\002\000\022\003\072\005\070\006\062\007" +
    "\061\017\075\020\060\025\065\047\071\001\002\000\024" +
    "\003\072\005\070\006\062\007\061\017\075\020\060\025" +
    "\065\042\u02ea\047\071\001\002\000\020\002\uffd7\003\uffd7" +
    "\004\uffd7\015\uffd7\017\uffd7\025\uffd7\047\uffd7\001\002\000" +
    "\024\003\072\005\070\006\062\007\061\017\075\020\060" +
    "\025\065\042\u02ed\047\071\001\002\000\020\002\uffe1\003" +
    "\uffe1\004\uffe1\015\uffe1\017\uffe1\025\uffe1\047\uffe1\001\002" +
    "\000\020\002\uffe2\003\uffe2\004\uffe2\015\uffe2\017\uffe2\025" +
    "\uffe2\047\uffe2\001\002\000\022\003\072\005\070\006\062" +
    "\007\061\017\075\020\060\025\065\047\071\001\002\000" +
    "\024\003\072\005\070\006\062\007\061\017\075\020\060" +
    "\025\065\042\u02f0\047\071\001\002\000\020\002\uffd8\003" +
    "\uffd8\004\uffd8\015\uffd8\017\uffd8\025\uffd8\047\uffd8\001\002" +
    "\000\004\041\u02f2\001\002\000\022\003\072\005\070\006" +
    "\062\007\061\017\075\020\060\025\065\047\071\001\002" +
    "\000\024\003\072\005\070\006\062\007\061\017\075\020" +
    "\060\025\065\042\u02f4\047\071\001\002\000\020\002\uffd9" +
    "\003\uffd9\004\uffd9\015\uffd9\017\uffd9\025\uffd9\047\uffd9\001" +
    "\002\000\004\040\u02f6\001\002\000\004\041\u02f7\001\002" +
    "\000\022\003\072\005\070\006\062\007\061\017\075\020" +
    "\060\025\065\047\071\001\002\000\024\003\072\005\070" +
    "\006\062\007\061\017\075\020\060\025\065\042\u02f9\047" +
    "\071\001\002\000\020\002\uffda\003\uffda\004\uffda\015\uffda" +
    "\017\uffda\025\uffda\047\uffda\001\002\000\004\047\u02fb\001" +
    "\002\000\004\040\u02fc\001\002\000\004\041\u02fd\001\002" +
    "\000\022\003\072\005\070\006\062\007\061\017\075\020" +
    "\060\025\065\047\071\001\002\000\024\003\072\005\070" +
    "\006\062\007\061\017\075\020\060\025\065\042\u02ff\047" +
    "\071\001\002\000\020\002\uffdb\003\uffdb\004\uffdb\015\uffdb" +
    "\017\uffdb\025\uffdb\047\uffdb\001\002\000\004\025\u0301\001" +
    "\002\000\004\047\u0302\001\002\000\004\040\u0303\001\002" +
    "\000\004\041\u0304\001\002\000\022\003\072\005\070\006" +
    "\062\007\061\017\075\020\060\025\065\047\071\001\002" +
    "\000\024\003\072\005\070\006\062\007\061\017\075\020" +
    "\060\025\065\042\u0306\047\071\001\002\000\020\002\uffdc" +
    "\003\uffdc\004\uffdc\015\uffdc\017\uffdc\025\uffdc\047\uffdc\001" +
    "\002\000\004\053\u0308\001\002\000\004\025\u0309\001\002" +
    "\000\004\047\u030a\001\002\000\004\040\u030b\001\002\000" +
    "\004\041\u030c\001\002\000\022\003\072\005\070\006\062" +
    "\007\061\017\075\020\060\025\065\047\071\001\002\000" +
    "\024\003\072\005\070\006\062\007\061\017\075\020\060" +
    "\025\065\042\u030e\047\071\001\002\000\020\002\uffdd\003" +
    "\uffdd\004\uffdd\015\uffdd\017\uffdd\025\uffdd\047\uffdd\001\002" +
    "\000\006\003\u0315\040\u0316\001\002\000\004\040\u0311\001" +
    "\002\000\004\041\u0312\001\002\000\006\003\u0206\047\u0208" +
    "\001\002\000\010\003\u0226\042\u0314\047\u0227\001\002\000" +
    "\020\002\uff59\003\uff59\004\uff59\015\uff59\017\uff59\025\uff59" +
    "\047\uff59\001\002\000\004\041\u031e\001\002\000\006\003" +
    "\u0318\041\u0317\001\002\000\010\003\u0206\042\u031b\047\u0208" +
    "\001\002\000\006\003\u0206\047\u0208\001\002\000\010\003" +
    "\u0226\042\u031a\047\u0227\001\002\000\020\002\uff57\003\uff57" +
    "\004\uff57\015\uff57\017\uff57\025\uff57\047\uff57\001\002\000" +
    "\020\002\uff5c\003\uff5c\004\uff5c\015\uff5c\017\uff5c\025\uff5c" +
    "\047\uff5c\001\002\000\010\003\u0226\042\u031d\047\u0227\001" +
    "\002\000\020\002\uff5d\003\uff5d\004\uff5d\015\uff5d\017\uff5d" +
    "\025\uff5d\047\uff5d\001\002\000\006\003\u0206\047\u0208\001" +
    "\002\000\010\003\u0226\042\u0320\047\u0227\001\002\000\020" +
    "\002\uff58\003\uff58\004\uff58\015\uff58\017\uff58\025\uff58\047" +
    "\uff58\001\002\000\004\025\u0322\001\002\000\004\047\u0323" +
    "\001\002\000\004\053\u0324\001\002\000\004\025\u0325\001" +
    "\002\000\004\047\u0326\001\002\000\004\040\u0327\001\002" +
    "\000\004\041\u0328\001\002\000\022\003\072\005\070\006" +
    "\062\007\061\017\075\020\060\025\065\047\071\001\002" +
    "\000\024\003\072\005\070\006\062\007\061\017\075\020" +
    "\060\025\065\042\u032a\047\071\001\002\000\020\002\uffdf" +
    "\003\uffdf\004\uffdf\015\uffdf\017\uffdf\025\uffdf\047\uffdf\001" +
    "\002\000\004\041\u032c\001\002\000\006\003\u0206\047\u0208" +
    "\001\002\000\010\003\u0226\042\u032e\047\u0227\001\002\000" +
    "\020\002\uff5a\003\uff5a\004\uff5a\015\uff5a\017\uff5a\025\uff5a" +
    "\047\uff5a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u032c\000\014\002\006\003\005\004\004\023\014\025" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\u02c7\004\u02c6\023\u02ca\025\u02c9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\063\006\065\013\073\015\066\017\056\020\072\027\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\u0139" +
    "\013\u013d\015\u013a\017\u0137\020\u013c\027\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\213\010\214\011\210\012" +
    "\212\014\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\315\011\313\012\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\u0109\011\u0107\012\u0108\016\u010a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\u010e\011\u010c\012\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\u0109\011\u0107\012\u0108\016\u0117" +
    "\001\001\000\010\010\u010e\011\u010c\012\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\u0109\011\u0107\012\u0108\016" +
    "\u0124\001\001\000\010\010\u010e\011\u010c\012\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u0145\010\214" +
    "\011\210\012\212\001\001\000\010\010\315\011\313\012" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u0156\010" +
    "\214\011\210\012\212\001\001\000\012\007\u0153\010\214" +
    "\011\210\012\212\001\001\000\010\010\315\011\313\012" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\315\011\313\012\314\001\001\000\002\001\001\000" +
    "\012\007\u0159\010\214\011\210\012\212\001\001\000\010" +
    "\010\315\011\313\012\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\u015d\010\214\011\210\012\212" +
    "\001\001\000\010\010\315\011\313\012\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u0162\010\214" +
    "\011\210\012\212\001\001\000\002\001\001\000\010\010" +
    "\315\011\313\012\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u0167\010\214\011" +
    "\210\012\212\001\001\000\010\010\315\011\313\012\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u016d\010\214\011\210" +
    "\012\212\001\001\000\010\010\315\011\313\012\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u0175\010" +
    "\214\011\210\012\212\001\001\000\002\001\001\000\010" +
    "\010\315\011\313\012\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\u017a\010\214\011\210\012\212" +
    "\001\001\000\002\001\001\000\010\010\315\011\313\012" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u0183\010\214\011\210" +
    "\012\212\001\001\000\010\010\315\011\313\012\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\u0193\010\214\011" +
    "\210\012\212\014\u0194\001\001\000\012\007\u0191\010\214" +
    "\011\210\012\212\001\001\000\010\010\315\011\313\012" +
    "\314\001\001\000\002\001\001\000\010\010\315\011\313" +
    "\012\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\u0193\010\214\011\210\012\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\u01a9\010\214\011\210\012\212\001\001\000\002" +
    "\001\001\000\010\010\315\011\313\012\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u01ae\010\214" +
    "\011\210\012\212\001\001\000\002\001\001\000\010\010" +
    "\315\011\313\012\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\u01b5\010\214\011\210\012\212\001\001\000\002\001\001" +
    "\000\010\010\315\011\313\012\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\207\001" +
    "\001\000\002\001\001\000\012\007\u01bf\010\214\011\210" +
    "\012\212\001\001\000\010\010\315\011\313\012\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\u01c3" +
    "\010\214\011\210\012\212\001\001\000\010\010\315\011" +
    "\313\012\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\u01c8\010\214\011\210\012" +
    "\212\001\001\000\010\010\315\011\313\012\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\u01a9\010\214" +
    "\011\210\012\212\014\u01cf\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01d2\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\u01ae\010\214\011\210\012" +
    "\212\014\u01d5\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u01d8\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\u01dd" +
    "\010\214\011\210\012\212\001\001\000\010\010\315\011" +
    "\313\012\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\u01b5\010" +
    "\214\011\210\012\212\014\u01e3\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01e6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u01ec\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u01f7\001" +
    "\001\000\004\021\u01f4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u01fa\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u01fe\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u0206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\u0259\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u0264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0268" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u026e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u0279\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u027d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0283\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\u0290\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0294\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u029a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u02a5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u02a9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u02af\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u02d8\006\065\013\073\015\066\017\056\020\072\027" +
    "\062\001\001\000\016\006\u0139\013\u013d\015\u013a\017\u0137" +
    "\020\u013c\027\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\u02ea\006\065\013" +
    "\073\015\066\017\056\020\072\027\062\001\001\000\020" +
    "\005\u02e8\006\065\013\073\015\066\017\056\020\072\027" +
    "\062\001\001\000\016\006\u0139\013\u013d\015\u013a\017\u0137" +
    "\020\u013c\027\u0138\001\001\000\002\001\001\000\016\006" +
    "\u0139\013\u013d\015\u013a\017\u0137\020\u013c\027\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u02ee\006" +
    "\065\013\073\015\066\017\056\020\072\027\062\001\001" +
    "\000\016\006\u0139\013\u013d\015\u013a\017\u0137\020\u013c\027" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u02f2\006\065\013\073\015\066\017\056\020\072\027" +
    "\062\001\001\000\016\006\u0139\013\u013d\015\u013a\017\u0137" +
    "\020\u013c\027\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\u02f7\006\065\013\073" +
    "\015\066\017\056\020\072\027\062\001\001\000\016\006" +
    "\u0139\013\u013d\015\u013a\017\u0137\020\u013c\027\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\u02fd\006\065\013\073\015\066" +
    "\017\056\020\072\027\062\001\001\000\016\006\u0139\013" +
    "\u013d\015\u013a\017\u0137\020\u013c\027\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\u0304\006\065\013\073" +
    "\015\066\017\056\020\072\027\062\001\001\000\016\006" +
    "\u0139\013\u013d\015\u013a\017\u0137\020\u013c\027\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u030c\006\065\013\073\015\066\017\056\020\072\027" +
    "\062\001\001\000\016\006\u0139\013\u013d\015\u013a\017\u0137" +
    "\020\u013c\027\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u031b\001\001\000\004" +
    "\031\u0318\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u031e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\u0328\006\065\013\073\015\066\017\056" +
    "\020\072\027\062\001\001\000\016\006\u0139\013\u013d\015" +
    "\u013a\017\u0137\020\u013c\027\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u032c\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //INICIO DE METODOS
    @Override
    protected int error_sync_size(){
        return 1;
    }
    public static String msjEsemanticos = "";
    public Symbol tokenError; //Variable donde se guarda el error detectado
    public int numeroMetodo = 0;
    
    
    public boolean banderaErrorGeneral = false; //Si existe un error general esta variable = true
    public boolean banderaErroresProducidos = false; //Si existe un error producido esta variable = true
    
    
    public String msj_ErroresProducidos = ""; //Variable global donde se guarda todos los errores generales
    public String msj_ErrorGeneral = ""; //Variable global donde se guarda el error general


    
    
    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        try
        {
            Interfaz.errores_Producidos = s.value.toString();
            String lexema = s.value.toString();
            int fila = s.right + 1;
            int columna = s.left;
            tokenError = s;
            
            banderaErrorGeneral = true; //Existe un error general
            msj_ErrorGeneral = "Error sintactico por defecto en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema;
            //System.err.println("Error sintactico por defecto en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
                 
        }catch(Exception e) {}
    }
    
    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;
            
            String mensaje = "Error sintáctico irrecuperable, con el símbolo: " + lexema;
            //ErrorUI(mensaje, lexema, fila, columna);

            System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String n_error,String message, Object info){
        String eSintactico = "*Error Sintactico ";
        String eSemantico = "*Error Semantico ";
        if (info instanceof String){
            System.out.println(message+"aqui6");
        }else {
            if (info instanceof Symbol){
                Symbol s = (Symbol)info;
                String m = "*Error "+n_error+".";               
                Interfaz.banderax = true; //Como hay un error 
                ErrorUI(m, s.value.toString(), (s.right+1), message);
            }else{
                System.err.println(message);
            }
        }
    }

    public void ErrorUI(String pMsg, String token, int linea, String mensaje)
    {
        
        String msg = "";
        msg += pMsg + " En la línea: " + (linea) +"["+token+"]. "+mensaje+"\n"; //Aqui se guardan todos los errores producidos
        msj_ErroresProducidos += msg;
        //System.out.print(msg);
    }
    //CODIGO LLENAR TABLA DE IDENTIFICADORES

    public void añadirANm(String Nombre){
        Interfaz.nm.add(Nombre);
    }
    

    public void insertarIdentificadores(String id, String tdato, double val, int pos, String amb){
        Object []I = new Object[5];
        boolean esNuevo = true;
        String tipoDeDato = "";
        int existeAqui = 0;
        String tem = "";
        tem = String.valueOf(val);
        int val1=0;
        //-----------------------------------
        Pattern patron = Pattern.compile("[0-9]+\\.0");
        Pattern patron2 = Pattern.compile("^([0-9]+\\.?[0-9]*|[0-9]*\\.[0-9]+)$");
        double tem2;
        int tem3 = 0;
        
        if(V_Identificadores.identi.getRowCount()>0){
            for(int i = 0; i<V_Identificadores.identi.getRowCount(); i++){
                if(id.equals((String)V_Identificadores.identi.getValueAt(i,0))){
                    if(amb.equals((String)V_Identificadores.identi.getValueAt(i,4))){
                        esNuevo = false;
                        existeAqui = i;
                        tipoDeDato = (String)V_Identificadores.identi.getValueAt(i,1);
                    }
                }
            }
        }
            I[0]=id; 
            I[1]=tdato; 
            I[2]=tem; 
            I[3]=pos; 
            I[4]=amb;
            
        
        if(esNuevo){
            atributosIdentificador atr = new atributosIdentificador(tdato,val,pos,amb);
            V_Identificadores.identificadores.put(id,atr);
            if(tdato.equals("int")){ 
                
                Matcher mat = patron.matcher(tem);
                Matcher mat2 = patron2.matcher(tem);
                
                if(mat.matches()){
                    tem2 = Double.parseDouble(tem);
                    tem3 = (int)tem2;
                    //----------------
                    I[0]=id; 
                    I[1]=tdato; 
                    I[2]=tem3; 
                    I[3]=pos; 
                    I[4]=amb;
                    
                    V_Identificadores.identi.addRow(I);
                }else if(mat2.matches()){
                    Interfaz.banderax = true; //Como hay un error 
                    ErrorUI("*Error Semantico 088.",id,pos,"No hay coincidencia de tipos");
                }else{
                    V_Identificadores.identi.addRow(I);
                }
            }else{
               V_Identificadores.identi.addRow(I); 
            }           
        } else {
            V_Identificadores.identi.setValueAt(I[3], existeAqui, 3);
            V_Identificadores.identi.setValueAt(I[2], existeAqui, 2);
            atributosIdentificador atr = new atributosIdentificador(tipoDeDato,val,pos,amb);
            V_Identificadores.identificadores.put(id,atr);
            Interfaz.banderax = true; //Como hay un error 
            ErrorUI("*Error Semantico 087.",id,pos,"El identificador ya esta declarado");
            
        }
    }
    
//        public void insertarIdentificadores(String id, String tdato, int val, int pos, String amb){
//        Object []I = new Object[5];
//        boolean esNuevo = true;
//        String tipoDeDato = "";
//        int existeAqui = 0;
//        if(V_Identificadores.identi.getRowCount()>0){
//            for(int i = 0; i<V_Identificadores.identi.getRowCount(); i++){
//                if(id.equals((String)V_Identificadores.identi.getValueAt(i,0))){
//                    if(amb.equals((String)V_Identificadores.identi.getValueAt(i,4))){
//                        esNuevo = false;
//                        existeAqui = i;
//                        tipoDeDato = (String)V_Identificadores.identi.getValueAt(i,1);
//                    }
//                }
//            }
//        }
//            I[0]=id; 
//            I[1]=tdato; 
//            I[2]=val; 
//            I[3]=pos; 
//            I[4]=amb+"int";
//            
//        
//        if(esNuevo){
//            atributosIdentificador atr = new atributosIdentificador(tdato,val,pos,amb);
//            V_Identificadores.identificadores.put(id,atr);
//            V_Identificadores.identi.addRow(I);
//        } else {
//            V_Identificadores.identi.setValueAt(I[3], existeAqui, 3);
//            V_Identificadores.identi.setValueAt(I[2], existeAqui, 2);
//            atributosIdentificador atr = new atributosIdentificador(tipoDeDato,val,pos,amb);
//            V_Identificadores.identificadores.put(id,atr);
//            Interfaz.banderax = true; //Como hay un error 
//            ErrorUI("*Error Semantico 087.",id,pos,"El identificador ya esta declarado");
//            
//        }
//    } 
//    
       public void insertarIdentificadores(String id, String tdato, String val, int pos, String amb){
        Object []I = new Object[5];
        boolean esNuevo = true;
        int existeAqui = 0;
        Object valor = "";
        String tipoDeDato = "";

        if(V_Identificadores.identi.getRowCount()>0){
            for(int i = 0; i<V_Identificadores.identi.getRowCount(); i++){
                if(id.equals((String)V_Identificadores.identi.getValueAt(i,0))){
                    if(amb.equals((String)V_Identificadores.identi.getValueAt(i,4))){
                        esNuevo = false;
                        existeAqui = i;
                        tipoDeDato = (String)V_Identificadores.identi.getValueAt(i,1);
                    }
                }
                if(val.equals((String)V_Identificadores.identi.getValueAt(i,0))){
                    if(amb.equals((String)V_Identificadores.identi.getValueAt(i,4))){
                        valor = V_Identificadores.identi.getValueAt(i,2);
                    }
                }
            }
        }

        I[0]=id; 
        I[1]=tdato;
        I[2]=val;
        I[3]=pos; 
        I[4]=amb;
        
        
        if(esNuevo){
            V_Identificadores.identi.addRow(I);
            atributosIdentificador atr = new atributosIdentificador(tdato,Integer.parseInt(valor.toString()),pos,amb);
            V_Identificadores.identificadores.put(id,atr);
        } else {
            V_Identificadores.identi.setValueAt(I[3], existeAqui, 3);
            V_Identificadores.identi.setValueAt(I[2], existeAqui, 2);
            atributosIdentificador atr = new atributosIdentificador(tipoDeDato,Integer.parseInt(valor.toString()),pos,amb);
            V_Identificadores.identificadores.put(id,atr);
//            Interfaz.banderax = true; //Como hay un error 
//            ErrorUI("*Error Semantico 087.",id,pos,"El identificador ya esta declarado");
            
        }
    }
       
    //FINAL DE METODOS    




/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIAS_KEYP ::= Else If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP Else If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIAS_KEYP ::= Else If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP Else If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTENCIAS_KEYP ::= Else If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP Else If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIAS_KEYP ::= If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIAS_KEYP ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIAS_KEYP ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // N_KEYP ::= KeyPlayed parentesis_a pulsa Identificador parentesis_c Llave_a SENTENCIAS_KEYP Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_KEYP",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Identificador Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("085","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Identificador error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("084","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("083","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador error Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("082","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 error parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("081","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_ST_2 ::= Identificador parentesis_a Identificador Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("080","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_ST_2 ::= Identificador parentesis_a Identificador error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("079","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_ST_2 ::= Identificador parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("078","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_ST_2 ::= Identificador error Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("077","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_ST_2 ::= error parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("076","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_ST_2 ::= Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_ST_2 ::= Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // M_START ::= retnot star parentesis_a parentesis_c error SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("075","Llave de apertura incorrecta, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // M_START ::= retnot star parentesis_a error Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("074","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // M_START ::= retnot star error parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("073","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // M_START ::= retnot parentesis_a parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("072","Sentencia incorrecta, se espera: (star)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // M_START ::= error star parentesis_a parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("071","Sentencia incorrecta, se espera: (retnot)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // M_START ::= retnot star parentesis_a parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // M_START ::= retnot star parentesis_a parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIAS_C ::= delay_ms parentesis_a Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIAS_C ::= SENTENCIAS_C delay_ms parentesis_a Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIAS_C ::= output_low parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIAS_C ::= SENTENCIAS_C output_low parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIAS_C ::= output_high parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIAS_C ::= SENTENCIAS_C output_high parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIAS_E ::= SENTENCIAS_E caso Numero dosPuntos SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_E",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIAS_E ::= caso Numero dosPuntos SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_E",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIAS_EVENT ::= event parentesis_a Identificador parentesis_c error SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("070","Llave de apertura incorrecta, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIAS_EVENT ::= event parentesis_a Identificador error Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("069","Parentesis de cierre incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIAS_EVENT ::= event parentesis_a error parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("068","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIAS_EVENT ::= event error Identificador parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("067","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIAS_EVENT ::= error parentesis_a Identificador parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("066","Sentencia incorrecta, se espera: (event)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIAS_EVENT ::= event parentesis_a Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIAS_EVENT ::= event parentesis_a Identificador parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // N_IF_ELSE ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // N_IF_ELSE ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // N_IF_ELSE ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // N_IF_ELSE ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIAS_FOR ::= DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIAS_FOR ::= SENTENCIAS_FOR DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIAS_FOR ::= N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIAS_FOR ::= SENTENCIAS_FOR N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIAS_FOR ::= N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIAS_FOR ::= SENTENCIAS_FOR N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // N_FOR ::= For parentesis_a Identificador Op_asig Numero P_coma Identificador Op_relacional Numero P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // N_FOR ::= For parentesis_a T_dato Identificador Op_asig Identificador P_coma Identificador Op_relacional Identificador P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // N_FOR ::= For parentesis_a Identificador Op_asig Identificador P_coma Identificador Op_relacional Identificador P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c error SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("065","Llave de apertura incorrecta, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador error Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("064","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // N_IF ::= If parentesis_a Identificador Op_relacional error parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("063","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // N_IF ::= If parentesis_a Identificador error Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("062","Operador relacional incorrecto, se espera: (<,>,>=,<=,!=,==)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // N_IF ::= If parentesis_a error Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("061","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // N_IF ::= If error Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("060","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // N_IF ::= error parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c 
            {
              Object RESULT =null;
		report_error("082","sentencia incorrecta, se espera: (If)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // N_IF ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N_IF ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Division error P_coma 
            {
              Object RESULT =null;
		report_error("059","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Multiplicacion error P_coma 
            {
              Object RESULT =null;
		report_error("058","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Suma error P_coma 
            {
              Object RESULT =null;
		report_error("057","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Resta error P_coma 
            {
              Object RESULT =null;
		report_error("056","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION_W ::= Identificador Op_asig Identificador error Numero P_coma 
            {
              Object RESULT =null;
		report_error("055","Operador incorrecto, se espera un operador aritmetico valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION_W ::= Identificador Op_asig error Op_Resta Numero P_coma 
            {
              Object RESULT =null;
		report_error("054","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION_W ::= Identificador error Identificador Op_Resta Numero P_coma 
            {
              Object RESULT =null;
		report_error("053","Operador de asignacion incorrecto, se espera (=)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // N_CONTROLAR ::= Identificador parentesis_a Identificador Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("052","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // N_CONTROLAR ::= Identificador parentesis_a Identificador error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("051","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // N_CONTROLAR ::= Identificador parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("050","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // N_CONTROLAR ::= Identificador error Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("049","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // N_CONTROLAR ::= error parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("048","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_CONTROLAR ::= Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_CONTROLAR ::= Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_OUTPUT ::= output_N parentesis_a pines_B Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("047","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_OUTPUT ::= output_N parentesis_a pines_B Sig_Agru error parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("046","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_OUTPUT ::= output_N parentesis_a pines_B error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("045","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_OUTPUT ::= output_N parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("044","Contante incorrecta, se espera: (del PIN_0 al PIN_6)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_OUTPUT ::= output_N error pines_B Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("043","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_OUTPUT ::= error parentesis_a pines_B Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("042","Metodo Incorrecto, se espera: (output_N)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_OUTPUT ::= output_N parentesis_a pines_B Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIAS_W ::= DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIAS_W ::= SENTENCIAS_W DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIAS_W ::= N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIAS_W ::= SENTENCIAS_W N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIAS_W ::= N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIAS_W ::= SENTENCIAS_W N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador parentesis_c error SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("041","Llave de apertura incorrecto, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador error Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("040","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N_WHILE ::= While parentesis_a Identificador Op_relacional error parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("039","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // N_WHILE ::= While parentesis_a Identificador error Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("038","Operador relacional incorrecto, se espera: (<,>,>=,<=,!=,==)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // N_WHILE ::= While parentesis_a error Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("037","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // N_WHILE ::= While error Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("036","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_WHILE ::= error parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("035","Sentencia incorrecta, se espera: (While)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_WHILE ::= While parentesis_a Numero Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_WHILE ::= While parentesis_a Identificador Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_WHILE ::= While parentesis_a Numero Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_WHILE ::= While parentesis_a Numero Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_WHILE ::= While parentesis_a Identificador Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_WHILE ::= While parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_N_METODO ::= T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("034","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_N_METODO ::= T_dato error Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("033","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_N_METODO ::= T_dato Identificador error Numero P_coma 
            {
              Object RESULT =null;
		report_error("032","Operador de asignacion incorrecto, se espera: (=)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_N_METODO ::= error Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("031","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_N_METODO ::= T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("030","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_N_METODO ::= error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("029","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig Numero error 
            {
              Object RESULT =null;
		report_error("028","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("027","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_N_METODO ::= Final T_dato Identificador error 
            {
              Object RESULT =null;
		report_error("026","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_N_METODO ::= Final T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("025","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_N_METODO ::= Final error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("024","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_N_METODO ::= error T_dato Identificador P_coma 
            {
              Object RESULT =null;
		report_error("023","Modificador de acceso incorrecto se espera: (Final)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_N_METODO ::= Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), "", Integer.parseInt((String)val), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_N_METODO ::= Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), "", Integer.parseInt((String)val), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_N_METODO ::= T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), val.toString(), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
                System.out.println("Estas en: T_dato Identificador Op_asig Identificador P_coma ");
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_N_METODO ::= T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
                //insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, numeroMetodo+"");
                
                switch(tdato.toString()){
                    case "int":
                        if(val.toString().contains(".")){
                           report_error("088","No hay coincidencia de tipos.",val); RESULT = new Symbol(-1); 
                        }else{
                            insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, numeroMetodo+"");
                        }
                        break;
                    case "long":
                        insertarIdentificadores(id.toString(), tdato.toString(), Double.valueOf(val.toString()).doubleValue(), idright+1, numeroMetodo+"");
                        break;  
                }
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
                System.out.println("Estas en T_dato Identificador Op_asig Numero P_coma ");
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_N_METODO ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), 0, idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), val.toString(), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_N_METODO ::= Final T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), 0, idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS_R ::= SENTENCIAS_EVENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS_R ::= SENTENCIAS_R SENTENCIAS_EVENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS_R ::= DECLARACION_N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS_R ::= SENTENCIAS_R DECLARACION_N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS_R ::= N_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS_R ::= SENTENCIAS_R N_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS_R ::= N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS_R ::= SENTENCIAS_R N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS_R ::= N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS_R ::= SENTENCIAS_R N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS_R ::= N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS_R ::= SENTENCIAS_R N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c error SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("022","Llave de apertura incorrecto, se espera: {",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador error Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("021","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato error parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("020","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru error Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("019","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador error T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("018","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_METODO ::= retnot Identificador parentesis_a T_dato error Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("017","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_METODO ::= retnot Identificador parentesis_a error Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("016","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_METODO ::= retnot Identificador error T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("015","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_METODO ::= retnot error parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("014","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_METODO ::= error Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("013","Inicio de metodo incorrecto, se espera: (retnot)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		añadirANm(nm.toString()); insertarIdentificadores(nm.toString()+"()", "", 0, nmright+1, "IDFUNCION"); numeroMetodo++;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		añadirANm(nm.toString()); insertarIdentificadores(nm.toString()+"()", "", 0, nmright+1, "IDFUNCION"); numeroMetodo++;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("012","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato error Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("011","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador error Numero P_coma 
            {
              Object RESULT =null;
		report_error("010","Operador de asignacion incorrecto, se espera: (=)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= error Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("009","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("008","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("007","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Final T_dato Identificador Op_asig Numero error 
            {
              Object RESULT =null;
		report_error("006","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Final T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("005","Error sintactico: Tipode dato no valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Final T_dato Identificador error 
            {
              Object RESULT =null;
		report_error("004","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Final T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("003","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Final error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("002","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= error T_dato Identificador P_coma 
            {
              Object RESULT =null;
		report_error("001","Modificador de acceso incorrecto se espera: (Final)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), "", Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), "", Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), val.toString(), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
                
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= T_dato Identificador Op_asig Valor_fal P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
                
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= T_dato Identificador Op_asig Valor_ver P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		//insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, "Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
              insertarIdentificadores(id.toString(), tdato.toString(), Double.valueOf(val.toString()).doubleValue(), idright+1, "Global");
//              switch(tdato.toString()){
//                    case "int":
//                        if(val.toString().contains(".")){
//                            Interfaz.banderax = true; //Como hay un error
//                            ErrorUI("*Error Semantico 089.",val.toString(),idright+1,"No hay coincidencia de tipos.");
//                        }else{
//                            insertarIdentificadores(id.toString(), "int", Integer.parseInt((String)val), idright+1, "Global");
//                        }
//                        break;
//                    case "long":
//                        insertarIdentificadores(id.toString(), "long", Double.valueOf(val.toString()).doubleValue(), idright+1, "Global");
//                        break;  
//                }
          }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), 0, idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= Final T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int fin_alleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int fin_alright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object fin_al = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), fin_al.toString()+" "+tdato.toString(), val.toString(), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= Final T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int fin_alleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int fin_alright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object fin_al = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), fin_al.toString()+" "+tdato.toString(), Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= Final T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int fin_alleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int fin_alright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object fin_al = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), fin_al.toString()+" "+tdato.toString(), 0, idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= M_START 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= INICIO M_START 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= N_KEYP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= INICIO N_KEYP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INICIO N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}
}
