
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
<<<<<<< HEAD
// Sun Mar 13 17:50:57 MST 2022
=======
// Tue Dec 21 23:31:46 MST 2021
>>>>>>> 111cbd5d7853e4964ad168ee264a9b1661504239
//----------------------------------------------------

package Backend;

import java_cup.runtime.Symbol;
import Frontend.Interfaz;
import Frontend.V_Identificadores;

/** CUP v0.11a beta 20060608 generated parser.
<<<<<<< HEAD
  * @version Sun Mar 13 17:50:57 MST 2022
=======
  * @version Tue Dec 21 23:31:46 MST 2021
>>>>>>> 111cbd5d7853e4964ad168ee264a9b1661504239
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\300\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\003\006\000\002\003\010\000\002\003\010\000\002" +
    "\003\005\000\002\003\007\000\002\003\007\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\010\000\002\003\010\000\002\003\005\000" +
    "\002\003\005\000\002\003\007\000\002\003\007\000\002" +
    "\003\007\000\002\003\007\000\002\004\016\000\002\004" +
    "\015\000\002\004\016\000\002\004\016\000\002\004\016" +
    "\000\002\004\016\000\002\004\016\000\002\004\016\000" +
    "\002\004\016\000\002\004\016\000\002\004\016\000\002" +
    "\004\016\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\027\006\000\002\027\010\000\002\027\010\000\002\027" +
    "\005\000\002\027\007\000\002\027\007\000\002\027\006" +
    "\000\002\027\006\000\002\027\006\000\002\027\006\000" +
    "\002\027\010\000\002\027\010\000\002\027\005\000\002" +
    "\027\005\000\002\027\007\000\002\027\007\000\002\027" +
    "\007\000\002\027\007\000\002\006\013\000\002\006\013" +
    "\000\002\006\013\000\002\006\013\000\002\006\012\000" +
    "\002\006\012\000\002\006\012\000\002\006\012\000\002" +
    "\006\013\000\002\006\013\000\002\006\013\000\002\006" +
    "\013\000\002\006\013\000\002\006\013\000\002\006\013" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\010\011\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\011\000\002\010\011" +
    "\000\002\011\011\000\002\011\011\000\002\011\011\000" +
    "\002\011\011\000\002\011\011\000\002\011\011\000\002" +
    "\011\011\000\002\012\010\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\012\010\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\012\010\000" +
    "\002\012\010\000\002\012\010\000\002\013\013\000\002" +
    "\013\013\000\002\013\013\000\002\013\013\000\002\013" +
    "\012\000\002\013\012\000\002\013\012\000\002\013\012" +
    "\000\002\013\013\000\002\013\013\000\002\013\013\000" +
    "\002\013\013\000\002\013\013\000\002\013\013\000\002" +
    "\013\013\000\002\015\021\000\002\015\022\000\002\015" +
    "\021\000\002\016\004\000\002\016\003\000\002\016\004" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\017\015\000\002\017\015\000\002\017\015\000\002" +
    "\017\015\000\002\020\011\000\002\020\010\000\002\020" +
    "\011\000\002\020\011\000\002\020\011\000\002\020\011" +
    "\000\002\020\011\000\002\021\006\000\002\021\007\000" +
    "\002\022\010\000\002\022\007\000\002\022\010\000\002" +
    "\022\007\000\002\022\010\000\002\022\007\000\002\023" +
    "\011\000\002\023\010\000\002\023\011\000\002\023\010" +
    "\000\002\023\011\000\002\023\011\000\002\023\011\000" +
    "\002\031\011\000\002\031\011\000\002\031\011\000\002" +
    "\031\011\000\002\031\011\000\002\031\011\000\002\031" +
    "\011\000\002\031\012\000\002\031\012\000\002\031\012" +
    "\000\002\031\012\000\002\031\012\000\002\031\012\000" +
    "\002\031\012\000\002\025\012\000\002\030\014\000\002" +
    "\030\013\000\002\030\014\000\002\030\013\000\002\030" +
    "\014\000\002\030\013\000\002\030\015\000\002\030\014" +
    "\000\002\030\015\000\002\030\014\000\002\030\015\000" +
    "\002\030\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u031c\000\014\003\012\004\004\015\011\017\015\025" +
    "\010\001\002\000\012\003\u02bd\011\u02be\037\u02bc\047\u02bf" +
    "\001\002\000\016\002\ufffd\003\ufffd\004\ufffd\015\ufffd\017" +
    "\ufffd\025\ufffd\001\002\000\016\002\uffff\003\uffff\004\uffff" +
    "\015\uffff\017\uffff\025\uffff\001\002\000\016\002\u02b9\003" +
    "\012\004\004\015\011\017\015\025\010\001\002\000\006" +
    "\003\u02a6\047\u02a7\001\002\000\004\037\u0249\001\002\000" +
    "\010\011\037\025\040\047\041\001\002\000\016\002\ufffb" +
    "\003\ufffb\004\ufffb\015\ufffb\017\ufffb\025\ufffb\001\002\000" +
    "\016\002\ufff9\003\ufff9\004\ufff9\015\ufff9\017\ufff9\025\ufff9" +
    "\001\002\000\006\003\016\025\017\001\002\000\004\047" +
    "\035\001\002\000\006\003\020\047\021\001\002\000\004" +
    "\045\034\001\002\000\010\003\023\030\024\045\022\001" +
    "\002\000\016\002\ufff8\003\ufff8\004\ufff8\015\ufff8\017\ufff8" +
    "\025\ufff8\001\002\000\016\002\uffef\003\uffef\004\uffef\015" +
    "\uffef\017\uffef\025\uffef\001\002\000\010\003\026\047\027" +
    "\050\025\001\002\000\006\003\033\045\032\001\002\000" +
    "\004\045\031\001\002\000\004\045\030\001\002\000\016" +
    "\002\ufff6\003\ufff6\004\ufff6\015\ufff6\017\ufff6\025\ufff6\001" +
    "\002\000\016\002\uffee\003\uffee\004\uffee\015\uffee\017\uffee" +
    "\025\uffee\001\002\000\016\002\ufff7\003\ufff7\004\ufff7\015" +
    "\ufff7\017\ufff7\025\ufff7\001\002\000\016\002\uffed\003\uffed" +
    "\004\uffed\015\uffed\017\uffed\025\uffed\001\002\000\016\002" +
    "\ufff0\003\ufff0\004\ufff0\015\ufff0\017\ufff0\025\ufff0\001\002" +
    "\000\004\045\036\001\002\000\016\002\ufff1\003\ufff1\004" +
    "\ufff1\015\ufff1\017\ufff1\025\ufff1\001\002\000\004\037\u01fc" +
    "\001\002\000\004\047\u01fa\001\002\000\010\030\044\037" +
    "\042\045\043\001\002\000\004\025\047\001\002\000\016" +
    "\002\uffec\003\uffec\004\uffec\015\uffec\017\uffec\025\uffec\001" +
    "\002\000\004\050\045\001\002\000\004\045\046\001\002" +
    "\000\016\002\uffea\003\uffea\004\uffea\015\uffea\017\uffea\025" +
    "\uffea\001\002\000\004\047\050\001\002\000\004\053\051" +
    "\001\002\000\004\025\052\001\002\000\004\047\053\001" +
    "\002\000\004\040\054\001\002\000\004\041\055\001\002" +
    "\000\020\003\070\005\067\006\061\007\060\017\073\020" +
    "\057\025\064\001\002\000\022\003\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\017\uffd3\020\uffd3\025\uffd3\042\uffd3\001\002\000" +
    "\006\003\u01e2\037\u01e1\001\002\000\006\003\u0177\037\u0176" +
    "\001\002\000\006\003\u0139\037\u0138\001\002\000\022\003" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\017\uffd1\020\uffd1\025\uffd1" +
    "\042\uffd1\001\002\000\022\003\070\005\067\006\061\007" +
    "\060\017\073\020\057\025\064\042\u0135\001\002\000\006" +
    "\003\u0120\047\u0121\001\002\000\022\003\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\017\uffd9\020\uffd9\025\uffd9\042\uffd9\001\002" +
    "\000\022\003\uffd5\005\uffd5\006\uffd5\007\uffd5\017\uffd5\020" +
    "\uffd5\025\uffd5\042\uffd5\001\002\000\004\037\363\001\002" +
    "\000\010\025\117\037\115\047\116\001\002\000\022\003" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\017\uffcf\020\uffcf\025\uffcf" +
    "\042\uffcf\001\002\000\022\003\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\017\uffd7\020\uffd7\025\uffd7\042\uffd7\001\002\000\006" +
    "\003\074\025\075\001\002\000\004\047\113\001\002\000" +
    "\006\003\076\047\077\001\002\000\004\045\112\001\002" +
    "\000\010\003\100\030\102\045\101\001\002\000\022\003" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\017\uffc5\020\uffc5\025\uffc5" +
    "\042\uffc5\001\002\000\022\003\uffce\005\uffce\006\uffce\007" +
    "\uffce\017\uffce\020\uffce\025\uffce\042\uffce\001\002\000\010" +
    "\003\104\047\105\050\103\001\002\000\006\003\110\045" +
    "\111\001\002\000\004\045\107\001\002\000\004\045\106" +
    "\001\002\000\022\003\uffcc\005\uffcc\006\uffcc\007\uffcc\017" +
    "\uffcc\020\uffcc\025\uffcc\042\uffcc\001\002\000\022\003\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\017\uffc4\020\uffc4\025\uffc4\042" +
    "\uffc4\001\002\000\022\003\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\017\uffc3\020\uffc3\025\uffc3\042\uffc3\001\002\000\022\003" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\017\uffcd\020\uffcd\025\uffcd" +
    "\042\uffcd\001\002\000\022\003\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\017\uffc6\020\uffc6\025\uffc6\042\uffc6\001\002\000\004" +
    "\045\114\001\002\000\022\003\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\017\uffc7\020\uffc7\025\uffc7\042\uffc7\001\002\000\004" +
    "\047\126\001\002\000\006\030\123\045\122\001\002\000" +
    "\004\047\120\001\002\000\004\045\121\001\002\000\022" +
    "\003\uffc8\005\uffc8\006\uffc8\007\uffc8\017\uffc8\020\uffc8\025" +
    "\uffc8\042\uffc8\001\002\000\022\003\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\017\uffc2\020\uffc2\025\uffc2\042\uffc2\001\002\000" +
    "\004\050\124\001\002\000\004\045\125\001\002\000\022" +
    "\003\uffc0\005\uffc0\006\uffc0\007\uffc0\017\uffc0\020\uffc0\025" +
    "\uffc0\042\uffc0\001\002\000\006\035\127\040\130\001\002" +
    "\000\004\047\202\001\002\000\004\041\131\001\002\000" +
    "\004\021\133\001\002\000\006\021\176\042\175\001\002" +
    "\000\004\050\134\001\002\000\004\046\135\001\002\000" +
    "\010\010\140\022\137\023\141\001\002\000\014\010\157" +
    "\021\uff6b\022\156\023\160\042\uff6b\001\002\000\004\037" +
    "\152\001\002\000\004\037\146\001\002\000\004\037\142" +
    "\001\002\000\004\024\143\001\002\000\004\040\144\001" +
    "\002\000\004\045\145\001\002\000\014\010\uff66\021\uff66" +
    "\022\uff66\023\uff66\042\uff66\001\002\000\004\047\147\001" +
    "\002\000\004\040\150\001\002\000\004\045\151\001\002" +
    "\000\014\010\uff64\021\uff64\022\uff64\023\uff64\042\uff64\001" +
    "\002\000\004\024\153\001\002\000\004\040\154\001\002" +
    "\000\004\045\155\001\002\000\014\010\uff68\021\uff68\022" +
    "\uff68\023\uff68\042\uff68\001\002\000\004\037\171\001\002" +
    "\000\004\037\165\001\002\000\004\037\161\001\002\000" +
    "\004\024\162\001\002\000\004\040\163\001\002\000\004" +
    "\045\164\001\002\000\014\010\uff67\021\uff67\022\uff67\023" +
    "\uff67\042\uff67\001\002\000\004\047\166\001\002\000\004" +
    "\040\167\001\002\000\004\045\170\001\002\000\014\010" +
    "\uff65\021\uff65\022\uff65\023\uff65\042\uff65\001\002\000\004" +
    "\024\172\001\002\000\004\040\173\001\002\000\004\045" +
    "\174\001\002\000\014\010\uff69\021\uff69\022\uff69\023\uff69" +
    "\042\uff69\001\002\000\022\003\uff70\005\uff70\006\uff70\007" +
    "\uff70\017\uff70\020\uff70\025\uff70\042\uff70\001\002\000\004" +
    "\050\177\001\002\000\004\046\200\001\002\000\010\010" +
    "\140\022\137\023\141\001\002\000\014\010\157\021\uff6a" +
    "\022\156\023\160\042\uff6a\001\002\000\004\040\203\001" +
    "\002\000\004\041\204\001\002\000\010\003\210\014\205" +
    "\047\214\001\002\000\006\003\332\037\331\001\002\000" +
    "\004\042\330\001\002\000\012\003\uffaa\014\uffaa\042\uffaa" +
    "\047\uffaa\001\002\000\004\037\315\001\002\000\012\003" +
    "\uffa8\014\uffa8\042\uffa8\047\uffa8\001\002\000\012\003\210" +
    "\014\205\042\311\047\214\001\002\000\012\003\uffac\014" +
    "\uffac\042\uffac\047\uffac\001\002\000\010\003\216\030\217" +
    "\037\215\001\002\000\010\003\265\047\266\050\264\001" +
    "\002\000\004\047\254\001\002\000\006\003\220\047\221" +
    "\001\002\000\004\032\251\001\002\000\014\003\224\031" +
    "\226\032\222\033\225\034\223\001\002\000\006\003\246" +
    "\050\245\001\002\000\006\003\242\050\241\001\002\000" +
    "\004\050\237\001\002\000\006\003\234\050\233\001\002" +
    "\000\006\003\230\050\227\001\002\000\004\045\232\001" +
    "\002\000\004\045\231\001\002\000\012\003\uff91\014\uff91" +
    "\042\uff91\047\uff91\001\002\000\012\003\uff98\014\uff98\042" +
    "\uff98\047\uff98\001\002\000\004\045\236\001\002\000\004" +
    "\045\235\001\002\000\012\003\uff90\014\uff90\042\uff90\047" +
    "\uff90\001\002\000\012\003\uff97\014\uff97\042\uff97\047\uff97" +
    "\001\002\000\004\045\240\001\002\000\012\003\uff93\014" +
    "\uff93\042\uff93\047\uff93\001\002\000\004\045\244\001\002" +
    "\000\004\045\243\001\002\000\012\003\uff8f\014\uff8f\042" +
    "\uff8f\047\uff8f\001\002\000\012\003\uff96\014\uff96\042\uff96" +
    "\047\uff96\001\002\000\004\045\250\001\002\000\004\045" +
    "\247\001\002\000\012\003\uff92\014\uff92\042\uff92\047\uff92" +
    "\001\002\000\012\003\uff99\014\uff99\042\uff99\047\uff99\001" +
    "\002\000\004\050\252\001\002\000\004\045\253\001\002" +
    "\000\012\003\uff94\014\uff94\042\uff94\047\uff94\001\002\000" +
    "\006\032\255\053\256\001\002\000\004\050\262\001\002" +
    "\000\004\047\257\001\002\000\004\040\260\001\002\000" +
    "\004\045\261\001\002\000\012\003\uff9d\014\uff9d\042\uff9d" +
    "\047\uff9d\001\002\000\004\045\263\001\002\000\012\003" +
    "\uff95\014\uff95\042\uff95\047\uff95\001\002\000\004\053\305" +
    "\001\002\000\004\053\301\001\002\000\006\003\267\053" +
    "\270\001\002\000\004\047\276\001\002\000\004\047\271" +
    "\001\002\000\006\003\272\040\273\001\002\000\004\045" +
    "\275\001\002\000\004\045\274\001\002\000\012\003\uffa0" +
    "\014\uffa0\042\uffa0\047\uffa0\001\002\000\012\003\uff9a\014" +
    "\uff9a\042\uff9a\047\uff9a\001\002\000\004\040\277\001\002" +
    "\000\004\045\300\001\002\000\012\003\uff9b\014\uff9b\042" +
    "\uff9b\047\uff9b\001\002\000\004\047\302\001\002\000\004" +
    "\040\303\001\002\000\004\045\304\001\002\000\012\003" +
    "\uff9c\014\uff9c\042\uff9c\047\uff9c\001\002\000\004\050\306" +
    "\001\002\000\004\040\307\001\002\000\004\045\310\001" +
    "\002\000\012\003\uff9f\014\uff9f\042\uff9f\047\uff9f\001\002" +
    "\000\022\003\uffb4\005\uffb4\006\uffb4\007\uffb4\017\uffb4\020" +
    "\uffb4\025\uffb4\042\uffb4\001\002\000\012\003\uffab\014\uffab" +
    "\042\uffab\047\uffab\001\002\000\012\003\uffa9\014\uffa9\042" +
    "\uffa9\047\uffa9\001\002\000\012\003\uffad\014\uffad\042\uffad" +
    "\047\uffad\001\002\000\006\024\316\047\317\001\002\000" +
    "\004\053\324\001\002\000\004\053\320\001\002\000\004" +
    "\047\321\001\002\000\004\040\322\001\002\000\004\045" +
    "\323\001\002\000\012\003\uff9e\014\uff9e\042\uff9e\047\uff9e" +
    "\001\002\000\004\047\325\001\002\000\004\040\326\001" +
    "\002\000\004\045\327\001\002\000\012\003\uffa6\014\uffa6" +
    "\042\uffa6\047\uffa6\001\002\000\022\003\uff86\005\uff86\006" +
    "\uff86\007\uff86\017\uff86\020\uff86\025\uff86\042\uff86\001\002" +
    "\000\006\003\341\024\340\001\002\000\004\024\333\001" +
    "\002\000\004\053\334\001\002\000\004\047\335\001\002" +
    "\000\004\040\336\001\002\000\004\045\337\001\002\000" +
    "\012\003\uffa5\014\uffa5\042\uffa5\047\uffa5\001\002\000\006" +
    "\003\346\053\347\001\002\000\004\053\342\001\002\000" +
    "\004\047\343\001\002\000\004\040\344\001\002\000\004" +
    "\045\345\001\002\000\012\003\uffa4\014\uffa4\042\uffa4\047" +
    "\uffa4\001\002\000\004\047\360\001\002\000\006\003\350" +
    "\047\351\001\002\000\004\040\356\001\002\000\006\003" +
    "\352\040\353\001\002\000\004\045\355\001\002\000\004" +
    "\045\354\001\002\000\012\003\uffa7\014\uffa7\042\uffa7\047" +
    "\uffa7\001\002\000\012\003\uffa1\014\uffa1\042\uffa1\047\uffa1" +
    "\001\002\000\004\045\357\001\002\000\012\003\uffa2\014" +
    "\uffa2\042\uffa2\047\uffa2\001\002\000\004\040\361\001\002" +
    "\000\004\045\362\001\002\000\012\003\uffa3\014\uffa3\042" +
    "\uffa3\047\uffa3\001\002\000\006\025\365\047\364\001\002" +
    "\000\004\030\u0109\001\002\000\004\047\366\001\002\000" +
    "\004\030\367\001\002\000\004\047\370\001\002\000\004" +
    "\045\371\001\002\000\004\047\372\001\002\000\004\035" +
    "\373\001\002\000\004\047\374\001\002\000\004\045\375" +
    "\001\002\000\004\036\376\001\002\000\004\040\377\001" +
    "\002\000\004\041\u0100\001\002\000\010\003\210\014\205" +
    "\047\214\001\002\000\012\003\uff79\014\uff79\042\uff79\047" +
    "\uff79\001\002\000\012\003\uff77\014\uff77\042\uff77\047\uff77" +
    "\001\002\000\012\003\uff7b\014\uff7b\042\uff7b\047\uff7b\001" +
    "\002\000\012\003\210\014\205\042\u0105\047\214\001\002" +
    "\000\022\003\uff7e\005\uff7e\006\uff7e\007\uff7e\017\uff7e\020" +
    "\uff7e\025\uff7e\042\uff7e\001\002\000\012\003\uff7a\014\uff7a" +
    "\042\uff7a\047\uff7a\001\002\000\012\003\uff78\014\uff78\042" +
    "\uff78\047\uff78\001\002\000\012\003\uff7c\014\uff7c\042\uff7c" +
    "\047\uff7c\001\002\000\006\047\u010b\050\u010a\001\002\000" +
    "\004\045\u0116\001\002\000\004\045\u010c\001\002\000\004" +
    "\047\u010d\001\002\000\004\035\u010e\001\002\000\004\047" +
    "\u010f\001\002\000\004\045\u0110\001\002\000\004\036\u0111" +
    "\001\002\000\004\040\u0112\001\002\000\004\041\u0113\001" +
    "\002\000\010\003\210\014\205\047\214\001\002\000\012" +
    "\003\210\014\205\042\u0115\047\214\001\002\000\022\003" +
    "\uff7f\005\uff7f\006\uff7f\007\uff7f\017\uff7f\020\uff7f\025\uff7f" +
    "\042\uff7f\001\002\000\004\047\u0117\001\002\000\004\035" +
    "\u0118\001\002\000\004\050\u0119\001\002\000\004\045\u011a" +
    "\001\002\000\004\036\u011b\001\002\000\004\040\u011c\001" +
    "\002\000\004\041\u011d\001\002\000\010\003\210\014\205" +
    "\047\214\001\002\000\012\003\210\014\205\042\u011f\047" +
    "\214\001\002\000\022\003\uff7d\005\uff7d\006\uff7d\007\uff7d" +
    "\017\uff7d\020\uff7d\025\uff7d\042\uff7d\001\002\000\006\030" +
    "\u012e\045\u012d\001\002\000\010\003\u0122\030\u0124\045\u0123" +
    "\001\002\000\004\050\u012b\001\002\000\022\003\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\017\uffcb\020\uffcb\025\uffcb\042\uffcb" +
    "\001\002\000\010\003\u0126\047\u0127\050\u0125\001\002\000" +
    "\004\045\u012a\001\002\000\004\045\u0129\001\002\000\004" +
    "\045\u0128\001\002\000\022\003\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\017\uffc9\020\uffc9\025\uffc9\042\uffc9\001\002\000\022" +
    "\003\uffbd\005\uffbd\006\uffbd\007\uffbd\017\uffbd\020\uffbd\025" +
    "\uffbd\042\uffbd\001\002\000\022\003\uffca\005\uffca\006\uffca" +
    "\007\uffca\017\uffca\020\uffca\025\uffca\042\uffca\001\002\000" +
    "\004\045\u012c\001\002\000\022\003\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\017\uffbf\020\uffbf\025\uffbf\042\uffbf\001\002\000" +
    "\022\003\uffc1\005\uffc1\006\uffc1\007\uffc1\017\uffc1\020\uffc1" +
    "\025\uffc1\042\uffc1\001\002\000\004\050\u012f\001\002\000" +
    "\004\045\u0130\001\002\000\022\003\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\017\uffbe\020\uffbe\025\uffbe\042\uffbe\001\002\000" +
    "\022\003\uffd4\005\uffd4\006\uffd4\007\uffd4\017\uffd4\020\uffd4" +
    "\025\uffd4\042\uffd4\001\002\000\022\003\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\017\uffd2\020\uffd2\025\uffd2\042\uffd2\001\002" +
    "\000\022\003\uffda\005\uffda\006\uffda\007\uffda\017\uffda\020" +
    "\uffda\025\uffda\042\uffda\001\002\000\022\003\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\017\uffd6\020\uffd6\025\uffd6\042\uffd6\001" +
    "\002\000\016\002\uffe4\003\uffe4\004\uffe4\015\uffe4\017\uffe4" +
    "\025\uffe4\001\002\000\022\003\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\017\uffd0\020\uffd0\025\uffd0\042\uffd0\001\002\000\022" +
    "\003\uffd8\005\uffd8\006\uffd8\007\uffd8\017\uffd8\020\uffd8\025" +
    "\uffd8\042\uffd8\001\002\000\010\003\u0142\047\u0143\050\u0141" +
    "\001\002\000\004\047\u013a\001\002\000\004\035\u013b\001" +
    "\002\000\004\047\u013c\001\002\000\004\040\u013d\001\002" +
    "\000\004\041\u013e\001\002\000\010\003\210\014\205\047" +
    "\214\001\002\000\012\003\210\014\205\042\u0140\047\214" +
    "\001\002\000\022\003\uffb3\005\uffb3\006\uffb3\007\uffb3\017" +
    "\uffb3\020\uffb3\025\uffb3\042\uffb3\001\002\000\004\035\u0169" +
    "\001\002\000\004\035\u0163\001\002\000\006\003\u0144\035" +
    "\u0145\001\002\000\004\047\u015e\001\002\000\010\003\u0147" +
    "\047\u0148\050\u0146\001\002\000\004\040\u0159\001\002\000" +
    "\004\040\u0155\001\002\000\006\003\u0149\040\u014a\001\002" +
    "\000\004\041\u0152\001\002\000\006\003\u014c\041\u014b\001" +
    "\002\000\012\003\210\014\205\042\u014f\047\214\001\002" +
    "\000\010\003\210\014\205\047\214\001\002\000\012\003" +
    "\210\014\205\042\u014e\047\214\001\002\000\022\003\uffae" +
    "\005\uffae\006\uffae\007\uffae\017\uffae\020\uffae\025\uffae\042" +
    "\uffae\001\002\000\022\003\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\017\uffb8\020\uffb8\025\uffb8\042\uffb8\001\002\000\012\003" +
    "\210\014\205\042\u0151\047\214\001\002\000\022\003\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\017\uffbc\020\uffbc\025\uffbc\042" +
    "\uffbc\001\002\000\010\003\210\014\205\047\214\001\002" +
    "\000\012\003\210\014\205\042\u0154\047\214\001\002\000" +
    "\022\003\uffaf\005\uffaf\006\uffaf\007\uffaf\017\uffaf\020\uffaf" +
    "\025\uffaf\042\uffaf\001\002\000\004\041\u0156\001\002\000" +
    "\010\003\210\014\205\047\214\001\002\000\012\003\210" +
    "\014\205\042\u0158\047\214\001\002\000\022\003\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\017\uffb0\020\uffb0\025\uffb0\042\uffb0" +
    "\001\002\000\004\041\u015a\001\002\000\012\003\210\014" +
    "\205\042\u015b\047\214\001\002\000\022\003\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\017\uffb6\020\uffb6\025\uffb6\042\uffb6\001" +
    "\002\000\012\003\210\014\205\042\u015d\047\214\001\002" +
    "\000\022\003\uffba\005\uffba\006\uffba\007\uffba\017\uffba\020" +
    "\uffba\025\uffba\042\uffba\001\002\000\004\040\u015f\001\002" +
    "\000\004\041\u0160\001\002\000\010\003\210\014\205\047" +
    "\214\001\002\000\012\003\210\014\205\042\u0162\047\214" +
    "\001\002\000\022\003\uffb1\005\uffb1\006\uffb1\007\uffb1\017" +
    "\uffb1\020\uffb1\025\uffb1\042\uffb1\001\002\000\004\047\u0164" +
    "\001\002\000\004\040\u0165\001\002\000\004\041\u0166\001" +
    "\002\000\010\003\210\014\205\047\214\001\002\000\012" +
    "\003\210\014\205\042\u0168\047\214\001\002\000\022\003" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\017\uffb2\020\uffb2\025\uffb2" +
    "\042\uffb2\001\002\000\006\047\u016b\050\u016a\001\002\000" +
    "\004\040\u0171\001\002\000\004\040\u016c\001\002\000\004" +
    "\041\u016d\001\002\000\012\003\210\014\205\042\u016e\047" +
    "\214\001\002\000\022\003\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\017\uffb5\020\uffb5\025\uffb5\042\uffb5\001\002\000\012\003" +
    "\210\014\205\042\u0170\047\214\001\002\000\022\003\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\017\uffb9\020\uffb9\025\uffb9\042" +
    "\uffb9\001\002\000\004\041\u0172\001\002\000\012\003\210" +
    "\014\205\042\u0173\047\214\001\002\000\022\003\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\017\uffb7\020\uffb7\025\uffb7\042\uffb7" +
    "\001\002\000\012\003\210\014\205\042\u0175\047\214\001" +
    "\002\000\022\003\uffbb\005\uffbb\006\uffbb\007\uffbb\017\uffbb" +
    "\020\uffbb\025\uffbb\042\uffbb\001\002\000\012\003\u0180\047" +
    "\u0182\050\u017f\052\u0181\001\002\000\004\047\u0178\001\002" +
    "\000\004\035\u0179\001\002\000\004\047\u017a\001\002\000" +
    "\004\040\u017b\001\002\000\004\041\u017c\001\002\000\010" +
    "\003\210\014\205\047\214\001\002\000\012\003\210\014" +
    "\205\042\u017e\047\214\001\002\000\022\003\uff85\005\uff85" +
    "\006\uff85\007\uff85\017\uff85\020\uff85\025\uff85\042\uff85\001" +
    "\002\000\004\035\u01d9\001\002\000\004\035\u01d3\001\002" +
    "\000\004\035\u01c4\001\002\000\006\003\u0183\035\u0184\001" +
    "\002\000\004\047\u01bf\001\002\000\006\003\u0185\047\u0186" +
    "\001\002\000\004\040\u01bb\001\002\000\006\003\u0187\040" +
    "\u0188\001\002\000\004\041\u01b8\001\002\000\006\003\u018a" +
    "\041\u0189\001\002\000\012\003\210\014\205\042\u018f\047" +
    "\214\001\002\000\010\003\210\014\205\047\214\001\002" +
    "\000\012\003\210\014\205\042\u018c\047\214\001\002\000" +
    "\022\003\uff80\005\uff80\006\uff80\007\uff80\017\uff80\020\uff80" +
    "\025\uff80\042\uff80\001\002\000\012\003\210\014\205\042" +
    "\u01b7\047\214\001\002\000\004\042\u0190\001\002\000\022" +
    "\003\uff8a\005\uff8a\006\uff8a\007\uff8a\017\uff8a\020\uff8a\025" +
    "\uff8a\042\uff8a\001\002\000\004\012\u0191\001\002\000\006" +
    "\003\u0193\007\u0194\001\002\000\022\003\uff76\005\uff76\006" +
    "\uff76\007\uff76\017\uff76\020\uff76\025\uff76\042\uff76\001\002" +
    "\000\004\037\u01b1\001\002\000\006\003\u0177\037\u0195\001" +
    "\002\000\012\003\u0180\047\u0198\050\u0196\052\u0197\001\002" +
    "\000\004\035\u01aa\001\002\000\004\035\u019d\001\002\000" +
    "\006\003\u0183\035\u0199\001\002\000\006\003\u0185\047\u019a" +
    "\001\002\000\006\003\u0187\040\u019b\001\002\000\006\003" +
    "\u018a\041\u019c\001\002\000\012\003\210\014\205\042\u018f" +
    "\047\214\001\002\000\006\047\u019f\050\u019e\001\002\000" +
    "\004\040\u01a5\001\002\000\004\040\u01a0\001\002\000\004" +
    "\041\u01a1\001\002\000\012\003\210\014\205\042\u01a2\047" +
    "\214\001\002\000\022\003\uff88\005\uff88\006\uff88\007\uff88" +
    "\017\uff88\020\uff88\025\uff88\042\uff88\001\002\000\012\003" +
    "\210\014\205\042\u01a4\047\214\001\002\000\022\003\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\017\uff8c\020\uff8c\025\uff8c\042" +
    "\uff8c\001\002\000\004\041\u01a6\001\002\000\012\003\210" +
    "\014\205\042\u01a7\047\214\001\002\000\022\003\uff87\005" +
    "\uff87\006\uff87\007\uff87\017\uff87\020\uff87\025\uff87\042\uff87" +
    "\001\002\000\012\003\210\014\205\042\u01a9\047\214\001" +
    "\002\000\022\003\uff8b\005\uff8b\006\uff8b\007\uff8b\017\uff8b" +
    "\020\uff8b\025\uff8b\042\uff8b\001\002\000\004\050\u01ab\001" +
    "\002\000\004\040\u01ac\001\002\000\004\041\u01ad\001\002" +
    "\000\012\003\210\014\205\042\u01ae\047\214\001\002\000" +
    "\022\003\uff89\005\uff89\006\uff89\007\uff89\017\uff89\020\uff89" +
    "\025\uff89\042\uff89\001\002\000\012\003\210\014\205\042" +
    "\u01b0\047\214\001\002\000\022\003\uff8d\005\uff8d\006\uff8d" +
    "\007\uff8d\017\uff8d\020\uff8d\025\uff8d\042\uff8d\001\002\000" +
    "\004\047\u01b2\001\002\000\004\035\u01b3\001\002\000\004" +
    "\047\u01b4\001\002\000\004\040\u01b5\001\002\000\004\041" +
    "\u01b6\001\002\000\002\001\002\000\022\003\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\017\uff8e\020\uff8e\025\uff8e\042\uff8e\001" +
    "\002\000\010\003\210\014\205\047\214\001\002\000\012" +
    "\003\210\014\205\042\u01ba\047\214\001\002\000\022\003" +
    "\uff81\005\uff81\006\uff81\007\uff81\017\uff81\020\uff81\025\uff81" +
    "\042\uff81\001\002\000\004\041\u01bc\001\002\000\010\003" +
    "\210\014\205\047\214\001\002\000\012\003\210\014\205" +
    "\042\u01be\047\214\001\002\000\022\003\uff82\005\uff82\006" +
    "\uff82\007\uff82\017\uff82\020\uff82\025\uff82\042\uff82\001\002" +
    "\000\004\040\u01c0\001\002\000\004\041\u01c1\001\002\000" +
    "\010\003\210\014\205\047\214\001\002\000\012\003\210" +
    "\014\205\042\u01c3\047\214\001\002\000\022\003\uff83\005" +
    "\uff83\006\uff83\007\uff83\017\uff83\020\uff83\025\uff83\042\uff83" +
    "\001\002\000\006\047\u01c6\050\u01c5\001\002\000\004\040" +
    "\u01cd\001\002\000\004\040\u01c7\001\002\000\004\041\u01c8" +
    "\001\002\000\012\003\210\014\205\042\u01a2\047\214\001" +
    "\002\000\004\042\u01ca\001\002\000\004\012\u01cb\001\002" +
    "\000\006\003\u0193\007\u0194\001\002\000\022\003\uff74\005" +
    "\uff74\006\uff74\007\uff74\017\uff74\020\uff74\025\uff74\042\uff74" +
    "\001\002\000\004\041\u01ce\001\002\000\012\003\210\014" +
    "\205\042\u01a7\047\214\001\002\000\004\042\u01d0\001\002" +
    "\000\004\012\u01d1\001\002\000\006\003\u0193\007\u0194\001" +
    "\002\000\022\003\uff73\005\uff73\006\uff73\007\uff73\017\uff73" +
    "\020\uff73\025\uff73\042\uff73\001\002\000\004\047\u01d4\001" +
    "\002\000\004\040\u01d5\001\002\000\004\041\u01d6\001\002" +
    "\000\010\003\210\014\205\047\214\001\002\000\012\003" +
    "\210\014\205\042\u01d8\047\214\001\002\000\022\003\uff84" +
    "\005\uff84\006\uff84\007\uff84\017\uff84\020\uff84\025\uff84\042" +
    "\uff84\001\002\000\004\050\u01da\001\002\000\004\040\u01db" +
    "\001\002\000\004\041\u01dc\001\002\000\012\003\210\014" +
    "\205\042\u01ae\047\214\001\002\000\004\042\u01de\001\002" +
    "\000\004\012\u01df\001\002\000\006\003\u0193\007\u0194\001" +
    "\002\000\022\003\uff75\005\uff75\006\uff75\007\uff75\017\uff75" +
    "\020\uff75\025\uff75\042\uff75\001\002\000\006\003\u01e8\047" +
    "\u01e9\001\002\000\004\047\u01e3\001\002\000\004\040\u01e4" +
    "\001\002\000\004\041\u01e5\001\002\000\004\021\133\001" +
    "\002\000\006\021\176\042\u01e7\001\002\000\022\003\uff6f" +
    "\005\uff6f\006\uff6f\007\uff6f\017\uff6f\020\uff6f\025\uff6f\042" +
    "\uff6f\001\002\000\004\040\u01f6\001\002\000\006\003\u01ea" +
    "\040\u01eb\001\002\000\004\041\u01f3\001\002\000\006\003" +
    "\u01ed\041\u01ec\001\002\000\006\021\133\042\u01f0\001\002" +
    "\000\004\021\133\001\002\000\006\021\176\042\u01ef\001" +
    "\002\000\022\003\uff6c\005\uff6c\006\uff6c\007\uff6c\017\uff6c" +
    "\020\uff6c\025\uff6c\042\uff6c\001\002\000\022\003\uff71\005" +
    "\uff71\006\uff71\007\uff71\017\uff71\020\uff71\025\uff71\042\uff71" +
    "\001\002\000\006\021\176\042\u01f2\001\002\000\022\003" +
    "\uff72\005\uff72\006\uff72\007\uff72\017\uff72\020\uff72\025\uff72" +
    "\042\uff72\001\002\000\004\021\133\001\002\000\006\021" +
    "\176\042\u01f5\001\002\000\022\003\uff6d\005\uff6d\006\uff6d" +
    "\007\uff6d\017\uff6d\020\uff6d\025\uff6d\042\uff6d\001\002\000" +
    "\004\041\u01f7\001\002\000\004\021\133\001\002\000\006" +
    "\021\176\042\u01f9\001\002\000\022\003\uff6e\005\uff6e\006" +
    "\uff6e\007\uff6e\017\uff6e\020\uff6e\025\uff6e\042\uff6e\001\002" +
    "\000\004\045\u01fb\001\002\000\016\002\ufff2\003\ufff2\004" +
    "\ufff2\015\ufff2\017\ufff2\025\ufff2\001\002\000\004\040\u01fd" +
    "\001\002\000\004\041\u01fe\001\002\000\006\003\u01ff\047" +
    "\u0201\001\002\000\004\037\u0243\001\002\000\010\003\u021f" +
    "\042\u021e\047\u0220\001\002\000\006\003\u0203\037\u0202\001" +
    "\002\000\010\003\u020a\047\u020b\050\u0209\001\002\000\004" +
    "\047\u0204\001\002\000\004\053\u0205\001\002\000\004\047" +
    "\u0206\001\002\000\004\040\u0207\001\002\000\004\045\u0208" +
    "\001\002\000\010\003\uff59\042\uff59\047\uff59\001\002\000" +
    "\004\053\u021a\001\002\000\004\053\u0216\001\002\000\006" +
    "\003\u020c\053\u020d\001\002\000\004\047\u0213\001\002\000" +
    "\004\047\u020e\001\002\000\006\003\u020f\040\u0210\001\002" +
    "\000\004\045\u0212\001\002\000\004\045\u0211\001\002\000" +
    "\010\003\uff5c\042\uff5c\047\uff5c\001\002\000\010\003\uff56" +
    "\042\uff56\047\uff56\001\002\000\004\040\u0214\001\002\000" +
    "\004\045\u0215\001\002\000\010\003\uff57\042\uff57\047\uff57" +
    "\001\002\000\004\047\u0217\001\002\000\004\040\u0218\001" +
    "\002\000\004\045\u0219\001\002\000\010\003\uff58\042\uff58" +
    "\047\uff58\001\002\000\004\050\u021b\001\002\000\004\040" +
    "\u021c\001\002\000\004\045\u021d\001\002\000\010\003\uff5b" +
    "\042\uff5b\047\uff5b\001\002\000\016\002\uff61\003\uff61\004" +
    "\uff61\015\uff61\017\uff61\025\uff61\001\002\000\004\037\u023d" +
    "\001\002\000\006\003\u0222\037\u0221\001\002\000\010\003" +
    "\u0229\047\u022a\050\u0228\001\002\000\004\047\u0223\001\002" +
    "\000\004\053\u0224\001\002\000\004\047\u0225\001\002\000" +
    "\004\040\u0226\001\002\000\004\045\u0227\001\002\000\010" +
    "\003\uff52\042\uff52\047\uff52\001\002\000\004\053\u0239\001" +
    "\002\000\004\053\u0235\001\002\000\006\003\u022b\053\u022c" +
    "\001\002\000\004\047\u0232\001\002\000\004\047\u022d\001" +
    "\002\000\006\003\u022e\040\u022f\001\002\000\004\045\u0231" +
    "\001\002\000\004\045\u0230\001\002\000\010\003\uff55\042" +
    "\uff55\047\uff55\001\002\000\010\003\uff4f\042\uff4f\047\uff4f" +
    "\001\002\000\004\040\u0233\001\002\000\004\045\u0234\001" +
    "\002\000\010\003\uff50\042\uff50\047\uff50\001\002\000\004" +
    "\047\u0236\001\002\000\004\040\u0237\001\002\000\004\045" +
    "\u0238\001\002\000\010\003\uff51\042\uff51\047\uff51\001\002" +
    "\000\004\050\u023a\001\002\000\004\040\u023b\001\002\000" +
    "\004\045\u023c\001\002\000\010\003\uff54\042\uff54\047\uff54" +
    "\001\002\000\004\047\u023e\001\002\000\004\053\u023f\001" +
    "\002\000\004\047\u0240\001\002\000\004\040\u0241\001\002" +
    "\000\004\045\u0242\001\002\000\010\003\uff53\042\uff53\047" +
    "\uff53\001\002\000\004\047\u0244\001\002\000\004\053\u0245" +
    "\001\002\000\004\047\u0246\001\002\000\004\040\u0247\001" +
    "\002\000\004\045\u0248\001\002\000\010\003\uff5a\042\uff5a" +
    "\047\uff5a\001\002\000\004\013\u024a\001\002\000\004\047" +
    "\u024b\001\002\000\004\040\u024c\001\002\000\004\041\u024d" +
    "\001\002\000\006\007\u0250\012\u024f\001\002\000\010\007" +
    "\u027c\012\u027b\042\u027a\001\002\000\004\007\u0265\001\002" +
    "\000\004\037\u0251\001\002\000\006\047\u0253\052\u0252\001" +
    "\002\000\004\035\u025f\001\002\000\004\035\u0254\001\002" +
    "\000\006\047\u0256\052\u0255\001\002\000\004\040\u025b\001" +
    "\002\000\004\040\u0257\001\002\000\004\041\u0258\001\002" +
    "\000\002\001\002\000\004\042\u025a\001\002\000\010\007" +
    "\uff4c\012\uff4c\042\uff4c\001\002\000\004\041\u025c\001\002" +
    "\000\002\001\002\000\004\042\u025e\001\002\000\010\007" +
    "\uff48\012\uff48\042\uff48\001\002\000\004\047\u0260\001\002" +
    "\000\004\040\u0261\001\002\000\004\041\u0262\001\002\000" +
    "\002\001\002\000\004\042\u0264\001\002\000\010\007\uff4a" +
    "\012\uff4a\042\uff4a\001\002\000\004\037\u0266\001\002\000" +
    "\006\047\u0268\052\u0267\001\002\000\004\035\u0274\001\002" +
    "\000\004\035\u0269\001\002\000\006\047\u026b\052\u026a\001" +
    "\002\000\004\040\u0270\001\002\000\004\040\u026c\001\002" +
    "\000\004\041\u026d\001\002\000\002\001\002\000\004\042" +
    "\u026f\001\002\000\010\007\uff46\012\uff46\042\uff46\001\002" +
    "\000\004\041\u0271\001\002\000\002\001\002\000\004\042" +
    "\u0273\001\002\000\010\007\uff42\012\uff42\042\uff42\001\002" +
    "\000\004\047\u0275\001\002\000\004\040\u0276\001\002\000" +
    "\004\041\u0277\001\002\000\002\001\002\000\004\042\u0279" +
    "\001\002\000\010\007\uff44\012\uff44\042\uff44\001\002\000" +
    "\016\002\uff4e\003\uff4e\004\uff4e\015\uff4e\017\uff4e\025\uff4e" +
    "\001\002\000\004\007\u0291\001\002\000\004\037\u027d\001" +
    "\002\000\006\047\u027f\052\u027e\001\002\000\004\035\u028b" +
    "\001\002\000\004\035\u0280\001\002\000\006\047\u0282\052" +
    "\u0281\001\002\000\004\040\u0287\001\002\000\004\040\u0283" +
    "\001\002\000\004\041\u0284\001\002\000\002\001\002\000" +
    "\004\042\u0286\001\002\000\010\007\uff4d\012\uff4d\042\uff4d" +
    "\001\002\000\004\041\u0288\001\002\000\002\001\002\000" +
    "\004\042\u028a\001\002\000\010\007\uff49\012\uff49\042\uff49" +
    "\001\002\000\004\047\u028c\001\002\000\004\040\u028d\001" +
    "\002\000\004\041\u028e\001\002\000\002\001\002\000\004" +
    "\042\u0290\001\002\000\010\007\uff4b\012\uff4b\042\uff4b\001" +
    "\002\000\004\037\u0292\001\002\000\006\047\u0294\052\u0293" +
    "\001\002\000\004\035\u02a0\001\002\000\004\035\u0295\001" +
    "\002\000\006\047\u0297\052\u0296\001\002\000\004\040\u029c" +
    "\001\002\000\004\040\u0298\001\002\000\004\041\u0299\001" +
    "\002\000\002\001\002\000\004\042\u029b\001\002\000\010" +
    "\007\uff47\012\uff47\042\uff47\001\002\000\004\041\u029d\001" +
    "\002\000\002\001\002\000\004\042\u029f\001\002\000\010" +
    "\007\uff43\012\uff43\042\uff43\001\002\000\004\047\u02a1\001" +
    "\002\000\004\040\u02a2\001\002\000\004\041\u02a3\001\002" +
    "\000\002\001\002\000\004\042\u02a5\001\002\000\010\007" +
    "\uff45\012\uff45\042\uff45\001\002\000\006\030\u02b4\045\u02b3" +
    "\001\002\000\010\003\u02a9\030\u02aa\045\u02a8\001\002\000" +
    "\016\002\ufff5\003\ufff5\004\ufff5\015\ufff5\017\ufff5\025\ufff5" +
    "\001\002\000\004\050\u02b1\001\002\000\010\003\u02ac\047" +
    "\u02ad\050\u02ab\001\002\000\004\045\u02b0\001\002\000\004" +
    "\045\u02af\001\002\000\004\045\u02ae\001\002\000\016\002" +
    "\ufff3\003\ufff3\004\ufff3\015\ufff3\017\ufff3\025\ufff3\001\002" +
    "\000\016\002\uffe7\003\uffe7\004\uffe7\015\uffe7\017\uffe7\025" +
    "\uffe7\001\002\000\016\002\ufff4\003\ufff4\004\ufff4\015\ufff4" +
    "\017\ufff4\025\ufff4\001\002\000\004\045\u02b2\001\002\000" +
    "\016\002\uffe9\003\uffe9\004\uffe9\015\uffe9\017\uffe9\025\uffe9" +
    "\001\002\000\016\002\uffeb\003\uffeb\004\uffeb\015\uffeb\017" +
    "\uffeb\025\uffeb\001\002\000\004\050\u02b5\001\002\000\004" +
    "\045\u02b6\001\002\000\016\002\uffe8\003\uffe8\004\uffe8\015" +
    "\uffe8\017\uffe8\025\uffe8\001\002\000\016\002\ufffe\003\ufffe" +
    "\004\ufffe\015\ufffe\017\ufffe\025\ufffe\001\002\000\016\002" +
    "\000\003\000\004\000\015\000\017\000\025\000\001\002" +
    "\000\004\002\001\001\002\000\016\002\ufffc\003\ufffc\004" +
    "\ufffc\015\ufffc\017\ufffc\025\ufffc\001\002\000\016\002\ufffa" +
    "\003\ufffa\004\ufffa\015\ufffa\017\ufffa\025\ufffa\001\002\000" +
    "\004\040\u031b\001\002\000\004\037\u0311\001\002\000\006" +
    "\003\u0300\037\u02ff\001\002\000\006\003\u02c1\037\u02c0\001" +
    "\002\000\006\003\u02cb\025\u02cc\001\002\000\004\025\u02c2" +
    "\001\002\000\004\047\u02c3\001\002\000\004\053\u02c4\001" +
    "\002\000\004\025\u02c5\001\002\000\004\047\u02c6\001\002" +
    "\000\004\040\u02c7\001\002\000\004\041\u02c8\001\002\000" +
    "\020\003\070\005\067\006\061\007\060\017\073\020\057" +
    "\025\064\001\002\000\022\003\070\005\067\006\061\007" +
    "\060\017\073\020\057\025\064\042\u02ca\001\002\000\016" +
    "\002\uffe2\003\uffe2\004\uffe2\015\uffe2\017\uffe2\025\uffe2\001" +
    "\002\000\004\047\u02f7\001\002\000\006\003\u02cd\047\u02ce" +
    "\001\002\000\004\053\u02f0\001\002\000\006\003\u02cf\053" +
    "\u02d0\001\002\000\004\025\u02ea\001\002\000\006\003\u02d1" +
    "\025\u02d2\001\002\000\004\047\u02e5\001\002\000\006\003" +
    "\u02d3\047\u02d4\001\002\000\004\040\u02e1\001\002\000\006" +
    "\003\u02d5\040\u02d6\001\002\000\004\041\u02de\001\002\000" +
    "\006\003\u02d8\041\u02d7\001\002\000\022\003\070\005\067" +
    "\006\061\007\060\017\073\020\057\025\064\042\u02dc\001" +
    "\002\000\020\003\070\005\067\006\061\007\060\017\073" +
    "\020\057\025\064\001\002\000\022\003\070\005\067\006" +
    "\061\007\060\017\073\020\057\025\064\042\u02da\001\002" +
    "\000\016\002\uffdb\003\uffdb\004\uffdb\015\uffdb\017\uffdb\025" +
    "\uffdb\001\002\000\022\003\070\005\067\006\061\007\060" +
    "\017\073\020\057\025\064\042\u02dd\001\002\000\016\002" +
    "\uffe5\003\uffe5\004\uffe5\015\uffe5\017\uffe5\025\uffe5\001\002" +
    "\000\016\002\uffe6\003\uffe6\004\uffe6\015\uffe6\017\uffe6\025" +
    "\uffe6\001\002\000\020\003\070\005\067\006\061\007\060" +
    "\017\073\020\057\025\064\001\002\000\022\003\070\005" +
    "\067\006\061\007\060\017\073\020\057\025\064\042\u02e0" +
    "\001\002\000\016\002\uffdc\003\uffdc\004\uffdc\015\uffdc\017" +
    "\uffdc\025\uffdc\001\002\000\004\041\u02e2\001\002\000\020" +
    "\003\070\005\067\006\061\007\060\017\073\020\057\025" +
    "\064\001\002\000\022\003\070\005\067\006\061\007\060" +
    "\017\073\020\057\025\064\042\u02e4\001\002\000\016\002" +
    "\uffdd\003\uffdd\004\uffdd\015\uffdd\017\uffdd\025\uffdd\001\002" +
    "\000\004\040\u02e6\001\002\000\004\041\u02e7\001\002\000" +
    "\020\003\070\005\067\006\061\007\060\017\073\020\057" +
    "\025\064\001\002\000\022\003\070\005\067\006\061\007" +
    "\060\017\073\020\057\025\064\042\u02e9\001\002\000\016" +
    "\002\uffde\003\uffde\004\uffde\015\uffde\017\uffde\025\uffde\001" +
    "\002\000\004\047\u02eb\001\002\000\004\040\u02ec\001\002" +
    "\000\004\041\u02ed\001\002\000\020\003\070\005\067\006" +
    "\061\007\060\017\073\020\057\025\064\001\002\000\022" +
    "\003\070\005\067\006\061\007\060\017\073\020\057\025" +
    "\064\042\u02ef\001\002\000\016\002\uffdf\003\uffdf\004\uffdf" +
    "\015\uffdf\017\uffdf\025\uffdf\001\002\000\004\025\u02f1\001" +
    "\002\000\004\047\u02f2\001\002\000\004\040\u02f3\001\002" +
    "\000\004\041\u02f4\001\002\000\020\003\070\005\067\006" +
    "\061\007\060\017\073\020\057\025\064\001\002\000\022" +
    "\003\070\005\067\006\061\007\060\017\073\020\057\025" +
    "\064\042\u02f6\001\002\000\016\002\uffe0\003\uffe0\004\uffe0" +
    "\015\uffe0\017\uffe0\025\uffe0\001\002\000\004\053\u02f8\001" +
    "\002\000\004\025\u02f9\001\002\000\004\047\u02fa\001\002" +
    "\000\004\040\u02fb\001\002\000\004\041\u02fc\001\002\000" +
    "\020\003\070\005\067\006\061\007\060\017\073\020\057" +
    "\025\064\001\002\000\022\003\070\005\067\006\061\007" +
    "\060\017\073\020\057\025\064\042\u02fe\001\002\000\016" +
    "\002\uffe1\003\uffe1\004\uffe1\015\uffe1\017\uffe1\025\uffe1\001" +
    "\002\000\006\003\u0305\040\u0306\001\002\000\004\040\u0301" +
    "\001\002\000\004\041\u0302\001\002\000\006\003\u01ff\047" +
    "\u0201\001\002\000\010\003\u021f\042\u0304\047\u0220\001\002" +
    "\000\016\002\uff5f\003\uff5f\004\uff5f\015\uff5f\017\uff5f\025" +
    "\uff5f\001\002\000\004\041\u030e\001\002\000\006\003\u0308" +
    "\041\u0307\001\002\000\010\003\u01ff\042\u030b\047\u0201\001" +
    "\002\000\006\003\u01ff\047\u0201\001\002\000\010\003\u021f" +
    "\042\u030a\047\u0220\001\002\000\016\002\uff5d\003\uff5d\004" +
    "\uff5d\015\uff5d\017\uff5d\025\uff5d\001\002\000\016\002\uff62" +
    "\003\uff62\004\uff62\015\uff62\017\uff62\025\uff62\001\002\000" +
    "\010\003\u021f\042\u030d\047\u0220\001\002\000\016\002\uff63" +
    "\003\uff63\004\uff63\015\uff63\017\uff63\025\uff63\001\002\000" +
    "\006\003\u01ff\047\u0201\001\002\000\010\003\u021f\042\u0310" +
    "\047\u0220\001\002\000\016\002\uff5e\003\uff5e\004\uff5e\015" +
    "\uff5e\017\uff5e\025\uff5e\001\002\000\004\025\u0312\001\002" +
    "\000\004\047\u0313\001\002\000\004\053\u0314\001\002\000" +
    "\004\025\u0315\001\002\000\004\047\u0316\001\002\000\004" +
    "\040\u0317\001\002\000\004\041\u0318\001\002\000\020\003" +
    "\070\005\067\006\061\007\060\017\073\020\057\025\064" +
    "\001\002\000\022\003\070\005\067\006\061\007\060\017" +
    "\073\020\057\025\064\042\u031a\001\002\000\016\002\uffe3" +
    "\003\uffe3\004\uffe3\015\uffe3\017\uffe3\025\uffe3\001\002\000" +
    "\004\041\u031c\001\002\000\006\003\u01ff\047\u0201\001\002" +
    "\000\010\003\u021f\042\u031e\047\u0220\001\002\000\016\002" +
    "\uff60\003\uff60\004\uff60\015\uff60\017\uff60\025\uff60\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u031c\000\014\002\006\003\005\004\004\023\013\025" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\u02b7\004\u02b6\023\u02ba\025\u02b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\062\006\064\013" +
    "\071\015\065\017\055\020\070\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\u0132\013\u0136\015\u0133" +
    "\017\u0130\020\u0135\027\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\211" +
    "\010\212\011\206\012\210\014\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\313\011\311\012\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\u0102\011\u0100\012\u0101\016\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\u0107\011\u0105\012\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\u0102\011\u0100\012\u0101\016\u0113\001\001\000" +
    "\010\010\u0107\011\u0105\012\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\u0102\011\u0100\012\u0101\016\u011d\001" +
    "\001\000\010\010\u0107\011\u0105\012\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u013e\010\212\011\206" +
    "\012\210\001\001\000\010\010\313\011\311\012\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u014f\010\212\011" +
    "\206\012\210\001\001\000\012\007\u014c\010\212\011\206" +
    "\012\210\001\001\000\010\010\313\011\311\012\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\313" +
    "\011\311\012\312\001\001\000\002\001\001\000\012\007" +
    "\u0152\010\212\011\206\012\210\001\001\000\010\010\313" +
    "\011\311\012\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\u0156\010\212\011\206\012\210\001\001" +
    "\000\010\010\313\011\311\012\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u015b\010\212\011\206" +
    "\012\210\001\001\000\002\001\001\000\010\010\313\011" +
    "\311\012\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\u0160\010\212\011\206\012" +
    "\210\001\001\000\010\010\313\011\311\012\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\u0166\010\212\011\206\012\210" +
    "\001\001\000\010\010\313\011\311\012\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u016e\010\212\011" +
    "\206\012\210\001\001\000\002\001\001\000\010\010\313" +
    "\011\311\012\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\u0173\010\212\011\206\012\210\001\001" +
    "\000\002\001\001\000\010\010\313\011\311\012\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\u017c\010\212\011\206\012\210" +
    "\001\001\000\010\010\313\011\311\012\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\u018c\010\212\011\206\012" +
    "\210\014\u018d\001\001\000\012\007\u018a\010\212\011\206" +
    "\012\210\001\001\000\010\010\313\011\311\012\312\001" +
    "\001\000\002\001\001\000\010\010\313\011\311\012\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0191\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u018c\010" +
    "\212\011\206\012\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\u01a2\010\212\011\206\012\210\001\001\000\002\001\001" +
    "\000\010\010\313\011\311\012\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u01a7\010\212\011\206" +
    "\012\210\001\001\000\002\001\001\000\010\010\313\011" +
    "\311\012\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u01ae\010" +
    "\212\011\206\012\210\001\001\000\002\001\001\000\010" +
    "\010\313\011\311\012\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\205\001\001\000" +
    "\002\001\001\000\012\007\u01b8\010\212\011\206\012\210" +
    "\001\001\000\010\010\313\011\311\012\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u01bc\010\212" +
    "\011\206\012\210\001\001\000\010\010\313\011\311\012" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u01c1\010\212\011\206\012\210\001" +
    "\001\000\010\010\313\011\311\012\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\u01a2\010\212\011\206" +
    "\012\210\014\u01c8\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u01cb\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\u01a7\010\212\011\206\012\210\014" +
    "\u01ce\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01d1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u01d6\010\212" +
    "\011\206\012\210\001\001\000\010\010\313\011\311\012" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\u01ae\010\212\011" +
    "\206\012\210\014\u01dc\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u01df\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u01e5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u01f0\001\001\000" +
    "\004\021\u01ed\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u01f3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u01f7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u01ff\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u024d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0258\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u025c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u026d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0284\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u0288\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u028e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0299\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u029d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u02a3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\u02c8\006\064\013\071\015\065\017\055\020\070" +
    "\027\061\001\001\000\016\006\u0132\013\u0136\015\u0133\017" +
    "\u0130\020\u0135\027\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\u02da\006\064" +
    "\013\071\015\065\017\055\020\070\027\061\001\001\000" +
    "\020\005\u02d8\006\064\013\071\015\065\017\055\020\070" +
    "\027\061\001\001\000\016\006\u0132\013\u0136\015\u0133\017" +
    "\u0130\020\u0135\027\u0131\001\001\000\002\001\001\000\016" +
    "\006\u0132\013\u0136\015\u0133\017\u0130\020\u0135\027\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u02de" +
    "\006\064\013\071\015\065\017\055\020\070\027\061\001" +
    "\001\000\016\006\u0132\013\u0136\015\u0133\017\u0130\020\u0135" +
    "\027\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\u02e2\006\064\013\071\015\065\017\055\020\070" +
    "\027\061\001\001\000\016\006\u0132\013\u0136\015\u0133\017" +
    "\u0130\020\u0135\027\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\u02e7\006\064\013" +
    "\071\015\065\017\055\020\070\027\061\001\001\000\016" +
    "\006\u0132\013\u0136\015\u0133\017\u0130\020\u0135\027\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\u02ed\006\064\013\071\015" +
    "\065\017\055\020\070\027\061\001\001\000\016\006\u0132" +
    "\013\u0136\015\u0133\017\u0130\020\u0135\027\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\u02f4\006\064\013" +
    "\071\015\065\017\055\020\070\027\061\001\001\000\016" +
    "\006\u0132\013\u0136\015\u0133\017\u0130\020\u0135\027\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\u02fc\006\064\013\071\015\065\017\055\020\070" +
    "\027\061\001\001\000\016\006\u0132\013\u0136\015\u0133\017" +
    "\u0130\020\u0135\027\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u0302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u030b\001\001\000" +
    "\004\031\u0308\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u030e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\u0318\006\064\013\071\015\065\017" +
    "\055\020\070\027\061\001\001\000\016\006\u0132\013\u0136" +
    "\015\u0133\017\u0130\020\u0135\027\u0131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u031c\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //INICIO DE METODOS
    @Override
    protected int error_sync_size(){
        return 1;
    }
    
    public Symbol tokenError; //Variable donde se guarda el error detectado
    public int numeroMetodo = 0;
    
    public boolean banderaErrorGeneral = false; //Si existe un error general esta variable = true
    public boolean banderaErroresProducidos = false; //Si existe un error producido esta variable = true
    
    public String msj_ErroresProducidos = ""; //Variable global donde se guarda todos los errores generales
    public String msj_ErrorGeneral = ""; //Variable global donde se guarda el error general

    
    
    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        try
        {
            Interfaz.errores_Producidos = s.value.toString();
            String lexema = s.value.toString();
            int fila = s.right + 1;
            int columna = s.left;
            tokenError = s;
            
            banderaErrorGeneral = true; //Existe un error general
            msj_ErrorGeneral = "Error sintactico por defecto en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema;
            //System.err.println("Error sintactico por defecto en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
                 
        }catch(Exception e) {}
    }
    
    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;
            
            String mensaje = "Error sintáctico irrecuperable, con el símbolo: " + lexema;
            //ErrorUI(mensaje, lexema, fila, columna);

            System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String n_error,String message, Object info){
        if (info instanceof String){
            System.out.println(message);
        }else {
            if (info instanceof Symbol){
                Symbol s = (Symbol)info;
                String m = "*Error Sintactico "+n_error+".";               
                Interfaz.banderax = true; //Como hay un error 
                ErrorUI(m, s.value.toString(), (s.right+1), message);
            }else{
                System.err.println(message);
            }
        }
    }

    public void ErrorUI(String pMsg, String token, int linea, String mensaje)
    {
        String msg = "";
        msg += pMsg + " En la línea: " + (linea) +"["+token+"]. "+mensaje+"\n"; //Aqui se guardan todos los errores producidos
        msj_ErroresProducidos += msg;
        //System.out.print(msg);
    }
    //CODIGO LLENAR TABLA DE IDENTIFICADORES

    public void añadirANm(String Nombre){
        Interfaz.nm.add(Nombre);
    }
    

    public void insertarIdentificadores(String id, String tdato, int val, int pos, String amb){
        Object []I = new Object[5];
        boolean esNuevo = true;
        int existeAqui = 0;
        I[0]=id; 
        I[1]=tdato; 
        I[2]=val; 
        I[3]=pos; 
        I[4]=amb;
        if(V_Identificadores.identi.getRowCount()>0){
            for(int i = 0; i<V_Identificadores.identi.getRowCount(); i++){
                if(id.equals((String)V_Identificadores.identi.getValueAt(i,0))){
                    if(amb.equals((String)V_Identificadores.identi.getValueAt(i,4))){
                        esNuevo = false;
                        existeAqui = i;
                    }
                }
            }
        }
        
        if(esNuevo){
            V_Identificadores.identi.addRow(I);
        } else {
            V_Identificadores.identi.setValueAt(I[3], existeAqui, 3);
            V_Identificadores.identi.setValueAt(I[2], existeAqui, 2);
        }
    }    
       
    //FINAL DE METODOS    


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIAS_KEYP ::= Else If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP Else If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIAS_KEYP ::= Else If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP Else If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIAS_KEYP ::= Else If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP Else If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIAS_KEYP ::= If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP If parentesis_a Identificador Op_relacional Kp_Teclado parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIAS_KEYP ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIAS_KEYP ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIAS_KEYP ::= SENTENCIAS_KEYP If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIA_ST Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_KEYP",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // N_KEYP ::= KeyPlayed parentesis_a pulsa Identificador parentesis_c Llave_a SENTENCIAS_KEYP Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_KEYP",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Identificador Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("085","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Identificador error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("084","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("083","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador error Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("082","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 error parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("081","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_ST_2 ::= SENTENCIA_ST_2 Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_ST_2 ::= Identificador parentesis_a Identificador Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("080","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_ST_2 ::= Identificador parentesis_a Identificador error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("079","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_ST_2 ::= Identificador parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("078","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_ST_2 ::= Identificador error Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("077","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_ST_2 ::= error parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("076","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_ST_2 ::= Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_ST_2 ::= Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ST_2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // M_START ::= retnot star parentesis_a parentesis_c error SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("075","Llave de apertura incorrecta, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // M_START ::= retnot star parentesis_a error Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("074","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // M_START ::= retnot star error parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("073","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // M_START ::= retnot parentesis_a parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("072","Sentencia incorrecta, se espera: (star)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // M_START ::= error star parentesis_a parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;
		report_error("071","Sentencia incorrecta, se espera: (retnot)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // M_START ::= retnot star parentesis_a parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // M_START ::= retnot star parentesis_a parentesis_c Llave_a SENTENCIA_ST_2 Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("M_START",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIAS_C ::= delay_ms parentesis_a Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIAS_C ::= SENTENCIAS_C delay_ms parentesis_a Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIAS_C ::= output_low parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIAS_C ::= SENTENCIAS_C output_low parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIAS_C ::= output_high parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIAS_C ::= SENTENCIAS_C output_high parentesis_a pines_B parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_C",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIAS_E ::= SENTENCIAS_E caso Numero dosPuntos SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_E",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIAS_E ::= caso Numero dosPuntos SENTENCIAS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_E",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIAS_EVENT ::= event parentesis_a Identificador parentesis_c error SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("070","Llave de apertura incorrecta, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIAS_EVENT ::= event parentesis_a Identificador error Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("069","Parentesis de cierre incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIAS_EVENT ::= event parentesis_a error parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("068","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIAS_EVENT ::= event error Identificador parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("067","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIAS_EVENT ::= error parentesis_a Identificador parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;
		report_error("066","Sentencia incorrecta, se espera: (event)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIAS_EVENT ::= event parentesis_a Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIAS_EVENT ::= event parentesis_a Identificador parentesis_c Llave_a SENTENCIAS_E Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_EVENT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // N_IF_ELSE ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // N_IF_ELSE ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // N_IF_ELSE ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // N_IF_ELSE ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c Else N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIAS_FOR ::= DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIAS_FOR ::= SENTENCIAS_FOR DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIAS_FOR ::= N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIAS_FOR ::= SENTENCIAS_FOR N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIAS_FOR ::= N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIAS_FOR ::= SENTENCIAS_FOR N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // N_FOR ::= For parentesis_a Identificador Op_asig Numero P_coma Identificador Op_relacional Numero P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // N_FOR ::= For parentesis_a T_dato Identificador Op_asig Identificador P_coma Identificador Op_relacional Identificador P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // N_FOR ::= For parentesis_a Identificador Op_asig Identificador P_coma Identificador Op_relacional Identificador P_coma Op_in_de_cremento parentesis_c Llave_a SENTENCIAS_FOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c error SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("065","Llave de apertura incorrecta, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador error Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("064","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // N_IF ::= If parentesis_a Identificador Op_relacional error parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("063","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // N_IF ::= If parentesis_a Identificador error Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("062","Operador relacional incorrecto, se espera: (<,>,>=,<=,!=,==)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // N_IF ::= If parentesis_a error Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("061","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // N_IF ::= If error Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("060","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // N_IF ::= error parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_IF Llave_c 
            {
              Object RESULT =null;
		report_error("082","sentencia incorrecta, se espera: (If)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // N_IF ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // N_IF ::= If parentesis_a Kp_Teclado Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // N_IF ::= If parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // N_IF ::= If parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_IF",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Division error P_coma 
            {
              Object RESULT =null;
		report_error("059","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Multiplicacion error P_coma 
            {
              Object RESULT =null;
		report_error("058","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Suma error P_coma 
            {
              Object RESULT =null;
		report_error("057","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Resta error P_coma 
            {
              Object RESULT =null;
		report_error("056","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION_W ::= Identificador Op_asig Identificador error Numero P_coma 
            {
              Object RESULT =null;
		report_error("055","Operador incorrecto, se espera un operador aritmetico valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION_W ::= Identificador Op_asig error Op_Resta Numero P_coma 
            {
              Object RESULT =null;
		report_error("054","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION_W ::= Identificador error Identificador Op_Resta Numero P_coma 
            {
              Object RESULT =null;
		report_error("053","Operador de asignacion incorrecto, se espera (=)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION_W ::= Identificador Op_asig Identificador Op_Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_W",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_CONTROLAR ::= Identificador parentesis_a Identificador Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("052","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_CONTROLAR ::= Identificador parentesis_a Identificador error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("051","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_CONTROLAR ::= Identificador parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("050","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_CONTROLAR ::= Identificador error Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("049","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_CONTROLAR ::= error parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("048","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_CONTROLAR ::= Identificador parentesis_a Numero Sig_Agru Numero parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_CONTROLAR ::= Identificador parentesis_a Identificador Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_CONTROLAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_OUTPUT ::= output_N parentesis_a pines_B Sig_Agru Identificador error P_coma 
            {
              Object RESULT =null;
		report_error("047","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_OUTPUT ::= output_N parentesis_a pines_B Sig_Agru error parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("046","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_OUTPUT ::= output_N parentesis_a pines_B error Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("045","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_OUTPUT ::= output_N parentesis_a error Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("044","Contante incorrecta, se espera: (del PIN_0 al PIN_6)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_OUTPUT ::= output_N error pines_B Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("043","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_OUTPUT ::= error parentesis_a pines_B Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;
		report_error("042","Metodo Incorrecto, se espera: (output_N)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_OUTPUT ::= output_N parentesis_a pines_B Sig_Agru Identificador parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_OUTPUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIAS_W ::= DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIAS_W ::= SENTENCIAS_W DECLARACION_W 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIAS_W ::= N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIAS_W ::= SENTENCIAS_W N_CONTROLAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIAS_W ::= N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIAS_W ::= SENTENCIAS_W N_OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_W",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador parentesis_c error SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("041","Llave de apertura incorrecto, se espera: {",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador error Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("040","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_WHILE ::= While parentesis_a Identificador Op_relacional error parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("039","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_WHILE ::= While parentesis_a Identificador error Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("038","Operador relacional incorrecto, se espera: (<,>,>=,<=,!=,==)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_WHILE ::= While parentesis_a error Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("037","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_WHILE ::= While error Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("036","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_WHILE ::= error parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;
		report_error("035","Sentencia incorrecta, se espera: (While)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_WHILE ::= While parentesis_a Numero Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_WHILE ::= While parentesis_a Identificador Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N_WHILE ::= While parentesis_a Numero Op_relacional Numero parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // N_WHILE ::= While parentesis_a Numero Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N_WHILE ::= While parentesis_a Identificador Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_WHILE ::= While parentesis_a Numero Op_relacional Numero parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_WHILE ::= While parentesis_a Identificador Op_relacional Identificador parentesis_c Llave_a SENTENCIAS_W Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_WHILE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_N_METODO ::= T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("034","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_N_METODO ::= T_dato error Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("033","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_N_METODO ::= T_dato Identificador error Numero P_coma 
            {
              Object RESULT =null;
		report_error("032","Operador de asignacion incorrecto, se espera: (=)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_N_METODO ::= error Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("031","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_N_METODO ::= T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("030","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_N_METODO ::= error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("029","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig Numero error 
            {
              Object RESULT =null;
		report_error("028","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("027","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_N_METODO ::= Final T_dato Identificador error 
            {
              Object RESULT =null;
		report_error("026","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_N_METODO ::= Final T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("025","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_N_METODO ::= Final error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("024","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_N_METODO ::= error T_dato Identificador P_coma 
            {
              Object RESULT =null;
		report_error("023","Modificador de acceso incorrecto se espera: (Final)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_N_METODO ::= T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_N_METODO ::= T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_N_METODO ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), 0, idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_N_METODO ::= Final T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_N_METODO ::= Final T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), 0, idright+1, numeroMetodo+"");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_N_METODO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS_R ::= SENTENCIAS_EVENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS_R ::= SENTENCIAS_R SENTENCIAS_EVENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS_R ::= DECLARACION_N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS_R ::= SENTENCIAS_R DECLARACION_N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS_R ::= N_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS_R ::= SENTENCIAS_R N_IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS_R ::= N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS_R ::= SENTENCIAS_R N_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAS_R ::= N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS_R ::= SENTENCIAS_R N_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS_R ::= N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAS_R ::= SENTENCIAS_R N_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_R",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c error SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("022","Llave de apertura incorrecto, se espera: {",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador error Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("021","Parentesis de cierre incorrecto, se espera: )",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato error parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("020","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru error Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("019","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador error T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("018","Signo de agrupacion incorrecto, se espera (?)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_METODO ::= retnot Identificador parentesis_a T_dato error Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("017","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_METODO ::= retnot Identificador parentesis_a error Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("016","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_METODO ::= retnot Identificador error T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("015","Parentesis de apertura incorrecto, se espera: (",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_METODO ::= retnot error parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("014","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_METODO ::= error Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		 report_error("013","Inicio de metodo incorrecto, se espera: (retnot)",tokenError); RESULT = new Symbol(-1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		añadirANm(nm.toString()); insertarIdentificadores(nm.toString()+"()", "", 0, nmright+1, "IDFUNCION"); numeroMetodo++;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_METODO ::= retnot Identificador parentesis_a T_dato Identificador Sig_Agru T_dato Identificador parentesis_c Llave_a SENTENCIAS_R Llave_c 
            {
              Object RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		añadirANm(nm.toString()); insertarIdentificadores(nm.toString()+"()", "", 0, nmright+1, "IDFUNCION"); numeroMetodo++;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("N_METODO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("012","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= T_dato error Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("011","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Identificador error Numero P_coma 
            {
              Object RESULT =null;
		report_error("010","Operador de asignacion incorrecto, se espera: (=)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= error Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		report_error("009","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("008","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("007","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Final T_dato Identificador Op_asig Numero error 
            {
              Object RESULT =null;
		report_error("006","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Final T_dato Identificador Op_asig error P_coma 
            {
              Object RESULT =null;
		report_error("005","Dato incorrecto, se espera un numero valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Final T_dato Identificador error 
            {
              Object RESULT =null;
		report_error("004","Operador de cierre incorrecto, se espera: (;)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Final T_dato error P_coma 
            {
              Object RESULT =null;
		report_error("003","Dato incorrecto, se espera un identificador valido",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Final error Identificador P_coma 
            {
              Object RESULT =null;
		report_error("002","Tipo de dato incorrecto se espera: (int | long)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= error T_dato Identificador P_coma 
            {
              Object RESULT =null;
		report_error("001","Modificador de acceso incorrecto se espera: (Final)",tokenError); RESULT = new Symbol(-1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), 0, idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= Final T_dato Identificador Op_asig Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= Final T_dato Identificador Op_asig Numero P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), Integer.parseInt((String)val), idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= Final T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		insertarIdentificadores(id.toString(), tdato.toString(), 0, idright+1, "Global");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= M_START 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= INICIO M_START 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= N_KEYP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= INICIO N_KEYP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INICIO N_METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
